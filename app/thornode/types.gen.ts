// This file is auto-generated by @hey-api/openapi-ts

export type Pool = {
    asset: string;
    short_code?: string;
    status: string;
    decimals?: number;
    pending_inbound_asset: string;
    pending_inbound_rune: string;
    balance_asset: string;
    balance_rune: string;
    /**
     * the USD (TOR) price of the asset in 1e8
     */
    asset_tor_price: string;
    /**
     * the total pool units, this is the sum of LP and synth units
     */
    pool_units: string;
    /**
     * the total pool liquidity provider units
     */
    LP_units: string;
    /**
     * the total synth units in the pool
     */
    synth_units: string;
    /**
     * the total supply of synths for the asset
     */
    synth_supply: string;
    /**
     * the balance of L1 asset deposited into the Savers Vault
     */
    savers_depth: string;
    /**
     * the number of units owned by Savers
     */
    savers_units: string;
    /**
     * the filled savers capacity in basis points, 4500/10000 = 45%
     */
    savers_fill_bps: string;
    /**
     * amount of remaining capacity in asset
     */
    savers_capacity_remaining: string;
    /**
     * whether additional synths cannot be minted
     */
    synth_mint_paused: boolean;
    /**
     * the amount of synth supply remaining before the current max supply is reached
     */
    synth_supply_remaining: string;
    /**
     * the amount of collateral collects for loans
     */
    loan_collateral: string;
    /**
     * the amount of remaining collateral collects for loans
     */
    loan_collateral_remaining: string;
    /**
     * the current loan collateralization ratio
     */
    loan_cr: string;
    /**
     * the depth of the derived virtual pool relative to L1 pool (in basis points)
     */
    derived_depth_bps: string;
};

export type DerivedPool = {
    asset: string;
    status: string;
    decimals?: number;
    balance_asset: string;
    balance_rune: string;
    /**
     * the depth of the derived virtual pool relative to L1 pool (in basis points)
     */
    derived_depth_bps: string;
};

export type Pol = {
    /**
     * total amount of RUNE deposited into the pools
     */
    rune_deposited: string;
    /**
     * total amount of RUNE withdrawn from the pools
     */
    rune_withdrawn: string;
    /**
     * total value of protocol's LP position in RUNE value
     */
    value: string;
    /**
     * profit and loss of protocol owned liquidity
     */
    pnl: string;
    /**
     * current amount of rune deposited
     */
    current_deposit: string;
};

export type RuneProvider = {
    rune_address: string;
    units: string;
    value: string;
    pnl: string;
    deposit_amount: string;
    withdraw_amount: string;
    last_deposit_height: number;
    last_withdraw_height: number;
};

export type LiquidityProviderSummary = {
    asset: string;
    rune_address?: string;
    asset_address?: string;
    last_add_height?: number;
    last_withdraw_height?: number;
    units: string;
    pending_rune: string;
    pending_asset: string;
    pending_tx_id?: string;
    rune_deposit_value: string;
    asset_deposit_value: string;
};

export type LiquidityProvider = {
    asset: string;
    rune_address?: string;
    asset_address?: string;
    last_add_height?: number;
    last_withdraw_height?: number;
    units: string;
    pending_rune: string;
    pending_asset: string;
    pending_tx_id?: string;
    rune_deposit_value: string;
    asset_deposit_value: string;
    rune_redeem_value?: string;
    asset_redeem_value?: string;
    luvi_deposit_value?: string;
    luvi_redeem_value?: string;
    luvi_growth_pct?: string;
};

export type Saver = {
    asset: string;
    asset_address: string;
    last_add_height?: number;
    last_withdraw_height?: number;
    units: string;
    asset_deposit_value: string;
    asset_redeem_value: string;
    growth_pct: string;
};

export type Borrower = {
    owner: string;
    asset: string;
    debt_issued: string;
    debt_repaid: string;
    debt_current: string;
    collateral_deposited: string;
    collateral_withdrawn: string;
    collateral_current: string;
    last_open_height: number;
    last_repay_height: number;
};

export type Coin = {
    asset: string;
    amount: string;
    decimals?: number;
};

export type Vault = {
    block_height?: number;
    pub_key?: string;
    coins: Array<Coin>;
    type?: 'AsgardVault' | 'YggdrasilVault';
    status: string;
    status_since?: number;
    /**
     * the list of node public keys which are members of the vault
     */
    membership?: Array<string>;
    chains?: Array<string>;
    inbound_tx_count?: number;
    outbound_tx_count?: number;
    pending_tx_block_heights?: Array<number>;
    routers: Array<VaultRouter>;
    addresses: Array<VaultAddress>;
    frozen?: Array<string>;
};

export type YggdrasilVault = {
    block_height?: number;
    pub_key?: string;
    coins: Array<Coin>;
    type?: 'AsgardVault' | 'YggdrasilVault';
    status_since?: number;
    /**
     * the list of node public keys which are members of the vault
     */
    membership?: Array<string>;
    chains?: Array<string>;
    inbound_tx_count?: number;
    outbound_tx_count?: number;
    pending_tx_block_heights?: Array<number>;
    routers: Array<VaultRouter>;
    status: string;
    /**
     * current node bond
     */
    bond: string;
    /**
     * value in rune of the vault's assets
     */
    total_value: string;
    addresses: Array<VaultAddress>;
};

export type VaultRouter = {
    chain?: string;
    router?: string;
};

export type VaultAddress = {
    chain: string;
    address: string;
};

export type VaultInfo = {
    pub_key: string;
    routers: Array<VaultRouter>;
};

export type StreamingSwap = {
    /**
     * the hash of a transaction
     */
    tx_id?: string;
    /**
     * how often each swap is made, in blocks
     */
    interval?: number;
    /**
     * the total number of swaps in a streaming swaps
     */
    quantity?: number;
    /**
     * the amount of swap attempts so far
     */
    count?: number;
    /**
     * the block height of the latest swap
     */
    last_height?: number;
    /**
     * the total number of tokens the swapper wants to receive of the output asset
     */
    trade_target: string;
    /**
     * the asset to be swapped from
     */
    source_asset?: string;
    /**
     * the asset to be swapped to
     */
    target_asset?: string;
    /**
     * the destination address to receive the swap output
     */
    destination?: string;
    /**
     * the number of input tokens the swapper has deposited
     */
    deposit: string;
    /**
     * the amount of input tokens that have been swapped so far
     */
    in: string;
    /**
     * the amount of output tokens that have been swapped so far
     */
    out: string;
    /**
     * the list of swap indexes that failed
     */
    failed_swaps?: Array<number>;
    /**
     * the list of reasons that sub-swaps have failed
     */
    failed_swap_reasons?: Array<string>;
};

export type Tx = {
    id?: string;
    chain?: string;
    from_address?: string;
    to_address?: string;
    coins: Array<Coin>;
    gas: Array<Coin>;
    memo?: string;
};

export type InboundAddress = {
    chain?: string;
    pub_key?: string;
    address?: string;
    router?: string;
    /**
     * Returns true if trading is unavailable for this chain, either because trading is halted globally or specifically for this chain
     */
    halted: boolean;
    /**
     * Returns true if trading is paused globally
     */
    global_trading_paused?: boolean;
    /**
     * Returns true if trading is paused for this chain
     */
    chain_trading_paused?: boolean;
    /**
     * Returns true if LP actions are paused for this chain
     */
    chain_lp_actions_paused?: boolean;
    /**
     * The minimum fee rate used by vaults to send outbound TXs. The actual fee rate may be higher. For EVM chains this is returned in gwei (1e9).
     */
    gas_rate?: string;
    /**
     * Units of the gas_rate.
     */
    gas_rate_units?: string;
    /**
     * Avg size of outbound TXs on each chain. For UTXO chains it may be larger than average, as it takes into account vault consolidation txs, which can have many vouts
     */
    outbound_tx_size?: string;
    /**
     * The total outbound fee charged to the user for outbound txs in the gas asset of the chain.
     */
    outbound_fee?: string;
    /**
     * Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.
     */
    dust_threshold?: string;
};

export type LastBlock = {
    chain: string;
    last_observed_in: number;
    last_signed_out: number;
    thorchain: number;
};

export type ObservedTx = {
    tx: Tx;
    observed_pub_key?: string;
    /**
     * the block height on the external source chain when the transaction was observed, not provided if chain is THOR
     */
    external_observed_height?: number;
    /**
     * the block height on the external source chain when confirmation counting will be complete, not provided if chain is THOR
     */
    external_confirmation_delay_height?: number;
    /**
     * the outbound aggregator to use, will also match a suffix
     */
    aggregator?: string;
    /**
     * the aggregator target asset provided to transferOutAndCall
     */
    aggregator_target?: string;
    /**
     * the aggregator target asset limit provided to transferOutAndCall
     */
    aggregator_target_limit?: string;
    signers?: Array<string>;
    keysign_ms?: number;
    out_hashes?: Array<string>;
    status?: 'done' | 'incomplete';
};

export type OutboundFee = {
    /**
     * the asset to display the outbound fee for
     */
    asset: string;
    /**
     * the asset's outbound fee, in (1e8-format) units of the asset
     */
    outbound_fee: string;
    /**
     * Total RUNE the network has withheld as fees to later cover gas costs for this asset's outbounds
     */
    fee_withheld_rune?: string;
    /**
     * Total RUNE the network has spent to reimburse gas costs for this asset's outbounds
     */
    fee_spent_rune?: string;
    /**
     * amount of RUNE by which the fee_withheld_rune exceeds the fee_spent_rune
     */
    surplus_rune?: string;
    /**
     * dynamic multiplier basis points, based on the surplus_rune, affecting the size of the outbound_fee
     */
    dynamic_multiplier_basis_points?: string;
};

export type MsgSwap = {
    tx: Tx;
    /**
     * the asset to be swapped to
     */
    target_asset: string;
    /**
     * the destination address to receive the swap output
     */
    destination?: string;
    /**
     * the minimum amount of output asset to receive (else cancelling and refunding the swap)
     */
    trade_target: string;
    /**
     * the affiliate address which will receive any affiliate fee
     */
    affiliate_address?: string;
    /**
     * the affiliate fee in basis points
     */
    affiliate_basis_points: string;
    /**
     * the signer (sender) of the transaction
     */
    signer?: string;
    /**
     * the contract address if an aggregator is specified for a non-THORChain SwapOut
     */
    aggregator?: string;
    /**
     * the desired output asset of the aggregator SwapOut
     */
    aggregator_target_address?: string;
    /**
     * the minimum amount of SwapOut asset to receive (else cancelling the SwapOut and receiving THORChain's output)
     */
    aggregator_target_limit?: string;
    /**
     * market if immediately completed or refunded, limit if held until fulfillable
     */
    order_type?: string;
    /**
     * number of swaps to execute in a streaming swap
     */
    stream_quantity?: number;
    /**
     * the interval (in blocks) to execute the streaming swap
     */
    stream_interval?: number;
};

export type TxOutItem = {
    chain: string;
    to_address: string;
    vault_pub_key?: string;
    coin: Coin;
    memo?: string;
    max_gas: Array<Coin>;
    gas_rate?: number;
    in_hash?: string;
    out_hash?: string;
    height?: number;
    /**
     * clout spent in RUNE for the outbound
     */
    clout_spent?: string;
};

export type TssMetric = {
    address?: string;
    tss_time?: number;
};

export type TssKeysignMetric = {
    tx_id?: string;
    node_tss_times: Array<TssMetric>;
};

export type Node = {
    node_address: string;
    status: 'Active' | 'Whitelisted' | 'Standby' | 'Disabled';
    pub_key_set: {
        secp256k1?: string;
        ed25519?: string;
    };
    /**
     * the consensus pub key for the node
     */
    validator_cons_pub_key: string;
    /**
     * the P2PID (:6040/p2pid endpoint) of the node
     */
    peer_id: string;
    /**
     * the block height at which the node became active
     */
    active_block_height: number;
    /**
     * the block height of the current provided information for the node
     */
    status_since: number;
    node_operator_address: string;
    /**
     * current node bond
     */
    total_bond: string;
    bond_providers: {
        /**
         * node operator fee in basis points
         */
        node_operator_fee: string;
        /**
         * all the bond providers for the node
         */
        providers: Array<{
            bond_address?: string;
            bond?: string;
        }>;
    };
    /**
     * the set of vault public keys of which the node is a member
     */
    signer_membership: Array<string>;
    requested_to_leave: boolean;
    /**
     * indicates whether the node has been forced to leave by the network, typically via ban
     */
    forced_to_leave: boolean;
    leave_height: number;
    ip_address: string;
    /**
     * the currently set version of the node
     */
    version: string;
    /**
     * the accumulated slash points, reset at churn but excessive slash points may carry over
     */
    slash_points: number;
    jail: {
        release_height?: number;
        reason?: string;
    };
    current_award: string;
    /**
     * the last observed heights for all chain by the node
     */
    observe_chains: Array<{
        chain: string;
        height: number;
    }>;
    preflight_status: {
        /**
         * the next status of the node
         */
        status: string;
        /**
         * the reason for the transition to the next status
         */
        reason: string;
        code: number;
    };
};

export type KeygenMetric = {
    pub_key?: string;
    node_tss_times: Array<{
        address?: string;
        tss_time?: string;
    }>;
};

export type ThornameAlias = {
    chain?: string;
    address?: string;
};

export type Thorname = {
    name?: string;
    expire_block_height?: number;
    owner?: string;
    preferred_asset: string;
    /**
     * Amount of RUNE currently accrued by this thorname in affiliate fees waiting to be swapped to preferred asset.
     */
    affiliate_collector_rune?: string;
    aliases: Array<ThornameAlias>;
};

export type QuoteFees = {
    /**
     * the target asset used for all fees
     */
    asset: string;
    /**
     * affiliate fee in the target asset
     */
    affiliate?: string;
    /**
     * outbound fee in the target asset
     */
    outbound?: string;
    /**
     * liquidity fees paid to pools in the target asset
     */
    liquidity: string;
    /**
     * total fees in the target asset
     */
    total: string;
    /**
     * the swap slippage in basis points
     */
    slippage_bps: number;
    /**
     * total basis points in fees relative to amount out
     */
    total_bps: number;
};

export type BlockTx = {
    hash: string;
    tx: {
        [key: string]: unknown;
    };
    result: {
        code?: number;
        data?: string;
        log?: string;
        info?: string;
        gas_wanted?: string;
        gas_used?: string;
        events?: Array<{
            [key: string]: string;
        }> | null;
        codespace?: string;
    };
};

export type UpgradeProposal = {
    /**
     * the name of the upgrade
     */
    name: string;
    /**
     * the block height at which the upgrade will occur
     */
    height: number;
    /**
     * the description of the upgrade, typically json with URLs to binaries for use with automation tools
     */
    info: string;
    /**
     * whether the upgrade has been approved by the active validators
     */
    approved?: boolean;
    /**
     * the percentage of active validators that have approved the upgrade
     */
    approved_percent?: string;
    /**
     * the amount of additional active validators required to reach quorum for the upgrade
     */
    validators_to_quorum?: number;
};

export type UpgradeVote = {
    /**
     * the node address of the voter
     */
    node_address: string;
    /**
     * the vote cast by the node
     */
    vote: 'approve' | 'reject';
};

export type Account = {
    type?: string;
    address?: string;
    pubkey?: string;
    sequence?: number;
    account_number?: number;
};

export type Amount = {
    denom: string;
    amount: string;
};

export type AccountResponse = {
    result?: {
        value?: Account;
    };
};

export type BalancesResponse = {
    result?: Array<Amount>;
};

export type PoolResponse = Pool;

export type PoolsResponse = Array<Pool>;

export type PoolSlipResponse = Array<{
    asset: string;
    /**
     * Pool slip for this asset's pool for the current height
     */
    pool_slip: number;
    /**
     * Number of stored pool slips contributing to the current stored rollup
     */
    rollup_count: number;
    /**
     * Median of rollup snapshots over a long period
     */
    long_rollup: number;
    /**
     * Stored sum of pool slips over a number of previous block heights
     */
    rollup: number;
    /**
     * Summed pool slips over a number of previous block heights, to checksum the stored rollup
     */
    summed_rollup?: number;
}>;

export type DerivedPoolResponse = DerivedPool;

export type DerivedPoolsResponse = Array<DerivedPool>;

export type RunePoolResponse = {
    pol: Pol;
    providers: {
        /**
         * the units of RUNEPool owned by providers (including pending)
         */
        units: string;
        /**
         * the units of RUNEPool owned by providers that remain pending
         */
        pending_units: string;
        /**
         * the amount of RUNE pending
         */
        pending_rune: string;
        /**
         * the value of the provider share of the RUNEPool (includes pending RUNE)
         */
        value: string;
        /**
         * the profit and loss of the provider share of the RUNEPool
         */
        pnl: string;
        /**
         * the current RUNE deposited by providers
         */
        current_deposit: string;
    };
    reserve: {
        /**
         * the units of RUNEPool owned by the reserve
         */
        units: string;
        /**
         * the value of the reserve share of the RUNEPool
         */
        value: string;
        /**
         * the profit and loss of the reserve share of the RUNEPool
         */
        pnl: string;
        /**
         * the current RUNE deposited by the reserve
         */
        current_deposit: string;
    };
};

export type RuneProviderResponse = RuneProvider;

export type RuneProvidersResponse = Array<RuneProvider>;

export type LiquidityProvidersResponse = Array<LiquidityProviderSummary>;

export type LiquidityProviderResponse = LiquidityProvider;

export type SaverResponse = Saver;

export type SaversResponse = Array<Saver>;

export type BorrowerResponse = Borrower;

export type BorrowersResponse = Array<Borrower>;

export type TxResponse = {
    observed_tx?: ObservedTx;
    /**
     * the thorchain height at which the inbound reached consensus
     */
    consensus_height?: number;
    /**
     * the thorchain height at which the outbound was finalised
     */
    finalised_height?: number;
    /**
     * the thorchain height for which the outbound was scheduled
     */
    outbound_height?: number;
    keysign_metric?: TssKeysignMetric;
};

export type TxDetailsResponse = {
    tx_id?: string;
    tx: ObservedTx;
    txs: Array<ObservedTx>;
    actions: Array<TxOutItem>;
    out_txs: Array<Tx>;
    /**
     * the thorchain height at which the inbound reached consensus
     */
    consensus_height?: number;
    /**
     * the thorchain height at which the outbound was finalised
     */
    finalised_height?: number;
    updated_vault?: boolean;
    reverted?: boolean;
    /**
     * the thorchain height for which the outbound was scheduled
     */
    outbound_height?: number;
};

export type TxSignersResponse = {
    tx_id?: string;
    tx: ObservedTx;
    txs: Array<ObservedTx>;
    actions: Array<TxOutItem>;
    out_txs: Array<Tx>;
    /**
     * the thorchain height at which the inbound reached consensus
     */
    consensus_height?: number;
    /**
     * the thorchain height at which the outbound was finalised
     */
    finalised_height?: number;
    updated_vault?: boolean;
    reverted?: boolean;
    /**
     * the thorchain height for which the outbound was scheduled
     */
    outbound_height?: number;
};

export type TxStagesResponse = {
    inbound_observed: {
        /**
         * returns true if any nodes have observed the transaction (to be deprecated in favour of counts)
         */
        started?: boolean;
        /**
         * number of signers for pre-confirmation-counting observations
         */
        pre_confirmation_count?: number;
        /**
         * number of signers for final observations, after any confirmation counting complete
         */
        final_count: number;
        /**
         * returns true if no transaction observation remains to be done
         */
        completed: boolean;
    };
    inbound_confirmation_counted?: {
        /**
         * the THORChain block height when confirmation counting began
         */
        counting_start_height?: number;
        /**
         * the external source chain for which confirmation counting takes place
         */
        chain?: string;
        /**
         * the block height on the external source chain when the transaction was observed
         */
        external_observed_height?: number;
        /**
         * the block height on the external source chain when confirmation counting will be complete
         */
        external_confirmation_delay_height?: number;
        /**
         * the estimated remaining seconds before confirmation counting completes
         */
        remaining_confirmation_seconds?: number;
        /**
         * returns true if no transaction confirmation counting remains to be done
         */
        completed: boolean;
    };
    inbound_finalised?: {
        /**
         * returns true if the inbound transaction has been finalised (THORChain agreeing it exists)
         */
        completed: boolean;
    };
    swap_status?: {
        /**
         * true when awaiting a swap
         */
        pending: boolean;
        streaming?: {
            /**
             * how often each swap is made, in blocks
             */
            interval: number;
            /**
             * the total number of swaps in a streaming swaps
             */
            quantity: number;
            /**
             * the amount of swap attempts so far
             */
            count: number;
        };
    };
    swap_finalised?: {
        /**
         * (to be deprecated in favor of swap_status) returns true if an inbound transaction's swap (successful or refunded) is no longer pending
         */
        completed: boolean;
    };
    outbound_delay?: {
        /**
         * the number of remaining THORChain blocks the outbound will be delayed
         */
        remaining_delay_blocks?: number;
        /**
         * the estimated remaining seconds of the outbound delay before it will be sent
         */
        remaining_delay_seconds?: number;
        /**
         * returns true if no transaction outbound delay remains
         */
        completed: boolean;
    };
    outbound_signed?: {
        /**
         * THORChain height for which the external outbound is scheduled
         */
        scheduled_outbound_height?: number;
        /**
         * THORChain blocks since the scheduled outbound height
         */
        blocks_since_scheduled?: number;
        /**
         * returns true if an external transaction has been signed and broadcast (and observed in its mempool)
         */
        completed: boolean;
    };
};

export type TxStatusResponse = {
    tx?: Tx;
    planned_out_txs?: Array<{
        chain: string;
        to_address: string;
        coin: Coin;
        /**
         * returns true if the planned transaction has a refund memo
         */
        refund: boolean;
    }>;
    out_txs?: Array<Tx>;
    stages: TxStagesResponse;
};

export type NodeResponse = Node;

export type NodesResponse = Array<Node>;

export type StreamingSwapsResponse = Array<StreamingSwap>;

export type StreamingSwapResponse = StreamingSwap;

export type YggdrasilVaultsResponse = Array<YggdrasilVault>;

export type VaultsResponse = Array<Vault>;

export type VaultResponse = Vault;

export type VaultPubkeysResponse = {
    asgard: Array<VaultInfo>;
    yggdrasil: Array<VaultInfo>;
    inactive: Array<VaultInfo>;
};

export type NetworkResponse = {
    /**
     * total amount of RUNE awarded to node operators
     */
    bond_reward_rune: string;
    /**
     * total bonded RUNE
     */
    total_bond_units: string;
    /**
     * effective security bond used to determine maximum pooled RUNE
     */
    effective_security_bond: string;
    /**
     * total reserve RUNE
     */
    total_reserve: string;
    /**
     * Returns true if there exist RetiringVaults which have not finished migrating funds to new ActiveVaults
     */
    vaults_migrating: boolean;
    /**
     * Sum of the gas the network has spent to send outbounds
     */
    gas_spent_rune: string;
    /**
     * Sum of the gas withheld from users to cover outbound gas
     */
    gas_withheld_rune: string;
    /**
     * Current outbound fee multiplier, in basis points
     */
    outbound_fee_multiplier?: string;
    /**
     * the outbound transaction fee in rune, converted from the NativeOutboundFeeUSD mimir (after USD fees are enabled)
     */
    native_outbound_fee_rune: string;
    /**
     * the native transaction fee in rune, converted from the NativeTransactionFeeUSD mimir (after USD fees are enabled)
     */
    native_tx_fee_rune: string;
    /**
     * the thorname register fee in rune, converted from the TNSRegisterFeeUSD mimir (after USD fees are enabled)
     */
    tns_register_fee_rune: string;
    /**
     * the thorname fee per block in rune, converted from the TNSFeePerBlockUSD mimir (after USD fees are enabled)
     */
    tns_fee_per_block_rune: string;
    /**
     * the rune price in tor
     */
    rune_price_in_tor: string;
    /**
     * the tor price in rune
     */
    tor_price_in_rune: string;
};

export type OutboundFeesResponse = Array<OutboundFee>;

export type InboundAddressesResponse = Array<InboundAddress>;

export type LastBlockResponse = Array<LastBlock>;

export type VersionResponse = {
    /**
     * current version
     */
    current: string;
    /**
     * next version (minimum version for a node to become Active)
     */
    next: string;
    /**
     * height at which the minimum joining version last changed
     */
    next_since_height?: number;
    /**
     * querier version
     */
    querier: string;
};

export type UpgradeProposalsResponse = Array<UpgradeProposal>;

export type UpgradeProposalResponse = UpgradeProposal;

export type UpgradeVotesResponse = Array<UpgradeVote>;

export type ConstantsResponse = {
    int_64_values?: {
        [key: string]: string;
    };
    bool_values?: {
        [key: string]: string;
    };
    string_values?: {
        [key: string]: string;
    };
};

export type BanResponse = {
    node_address?: string;
    block_height?: number;
    signers?: Array<string>;
};

export type QueueResponse = {
    swap: number;
    /**
     * number of signed outbound tx in the queue
     */
    outbound: number;
    internal: number;
    /**
     * scheduled outbound value in RUNE
     */
    scheduled_outbound_value: string;
    /**
     * scheduled outbound clout in RUNE
     */
    scheduled_outbound_clout: string;
};

export type SwapQueueResponse = Array<MsgSwap>;

export type OutboundResponse = Array<TxOutItem>;

export type ScheduledResponse = Array<TxOutItem>;

export type KeysignResponse = {
    keysign: {
        /**
         * the block(s) in which a tx out item is scheduled to be signed and moved from the scheduled outbound queue to the outbound queue
         */
        height?: number;
        tx_array: Array<TxOutItem>;
    };
    signature: string;
};

export type KeygenResponse = {
    keygen_block: {
        /**
         * the height of the keygen block
         */
        height?: number;
        keygens: Array<{
            id?: string;
            type?: string;
            members?: Array<string>;
        }>;
    };
    signature: string;
};

export type KeygenMetricsResponse = Array<KeygenMetric>;

export type MetricsResponse = {
    keygen?: KeygenMetricsResponse;
    keysign?: {
        tx_id?: string;
        node_tss_times?: Array<TssMetric>;
    };
};

export type ThornameResponse = Thorname;

export type SwapperCloutResponse = {
    /**
     * address associated with this clout account
     */
    address: string;
    /**
     * clout score, which is the amount of rune spent on swap fees
     */
    score?: string;
    /**
     * amount of clout that has been reclaimed in total over time (observed clout spent)
     */
    reclaimed?: string;
    /**
     * amount of clout that has been spent in total over time
     */
    spent?: string;
    /**
     * last block height that clout was spent
     */
    last_spent_height?: number;
    /**
     * last block height that clout was reclaimed
     */
    last_reclaim_height?: number;
};

export type TradeUnitResponse = {
    /**
     * trade account asset with "~" separator
     */
    asset: string;
    /**
     * total units of trade asset
     */
    units: string;
    /**
     * total depth of trade asset
     */
    depth: string;
};

export type TradeUnitsResponse = Array<TradeUnitResponse>;

export type TradeAccountResponse = {
    /**
     * trade account asset with "~" separator
     */
    asset: string;
    /**
     * units of trade asset belonging to this owner
     */
    units: string;
    /**
     * thor address of trade account owner
     */
    owner: string;
    /**
     * last thorchain height trade assets were added to trade account
     */
    last_add_height?: number;
    /**
     * last thorchain height trade assets were withdrawn from trade account
     */
    last_withdraw_height?: number;
};

export type TradeAccountsResponse = Array<TradeAccountResponse>;

export type SecuredAssetResponse = {
    /**
     * secured account asset with "-" separator
     */
    asset: string;
    /**
     * total share tokens issued for the asset
     */
    supply: string;
    /**
     * total deposits of the asset
     */
    depth: string;
};

export type SecuredAssetsResponse = Array<SecuredAssetResponse>;

export type MimirResponse = {
    [key: string]: string;
};

export type InvariantResponse = {
    /**
     * The name of the invariant.
     */
    invariant: string;
    /**
     * Returns true if the invariant is broken.
     */
    broken: boolean;
    /**
     * Informative message about the invariant result.
     */
    msg: Array<string>;
};

export type InvariantsResponse = {
    invariants?: Array<string>;
};

export type MimirNodesResponse = {
    mimirs?: Array<{
        key?: string;
        value?: number;
        signer?: string;
    }>;
};

export type ExportResponse = {
    [key: string]: unknown;
};

export type BlockResponse = {
    id: {
        hash: string;
        parts: {
            total: number;
            hash: string;
        };
    };
    header: {
        version: {
            block: string;
            app: string;
        };
        chain_id: string;
        height: number;
        time: string;
        last_block_id: {
            hash: string;
            parts: {
                total: number;
                hash: string;
            };
        };
        last_commit_hash: string;
        data_hash: string;
        validators_hash: string;
        next_validators_hash: string;
        consensus_hash: string;
        app_hash: string;
        last_results_hash: string;
        evidence_hash: string;
        proposer_address: string;
    };
    begin_block_events: Array<{
        [key: string]: string;
    }>;
    end_block_events: Array<{
        [key: string]: string;
    }>;
    txs: Array<BlockTx> | null;
};

export type BaseQuoteResponse = {
    /**
     * the inbound address for the transaction on the source chain
     */
    inbound_address?: string;
    /**
     * the approximate number of source chain blocks required before processing
     */
    inbound_confirmation_blocks?: number;
    /**
     * the approximate seconds for block confirmations required before processing
     */
    inbound_confirmation_seconds?: number;
    /**
     * the number of thorchain blocks the outbound will be delayed
     */
    outbound_delay_blocks?: number;
    /**
     * the approximate seconds for the outbound delay before it will be sent
     */
    outbound_delay_seconds?: number;
    fees?: QuoteFees;
    /**
     * the EVM chain router contract address
     */
    router?: string;
    /**
     * expiration timestamp in unix seconds
     */
    expiry?: number;
    /**
     * static warning message
     */
    warning?: string;
    /**
     * chain specific quote notes
     */
    notes?: string;
    /**
     * Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.
     */
    dust_threshold?: string;
    /**
     * The recommended minimum inbound amount for this transaction type & inbound asset. Sending less than this amount could result in failed refunds.
     */
    recommended_min_amount_in?: string;
    /**
     * the recommended gas rate to use for the inbound to ensure timely confirmation
     */
    recommended_gas_rate?: string;
    /**
     * the units of the recommended gas rate
     */
    gas_rate_units?: string;
};

export type QuoteSwapResponse = {
    '<<'?: unknown;
    /**
     * generated memo for the swap
     */
    memo?: string;
    /**
     * the amount of the target asset the user can expect to receive after fees
     */
    expected_amount_out: string;
    /**
     * the maximum amount of trades a streaming swap can do for a trade
     */
    max_streaming_quantity?: number;
    /**
     * the number of blocks the streaming swap will execute over
     */
    streaming_swap_blocks?: number;
    /**
     * approx the number of seconds the streaming swap will execute over
     */
    streaming_swap_seconds?: number;
    /**
     * total number of seconds a swap is expected to take (inbound conf + streaming swap + outbound delay)
     */
    total_swap_seconds?: number;
};

export type QuoteSaverDepositResponse = {
    '<<'?: unknown;
    /**
     * generated memo for the deposit
     */
    memo: string;
    /**
     * same as expected_amount_deposit, to be deprecated in favour of expected_amount_deposit
     */
    expected_amount_out?: string;
    /**
     * the amount of the target asset the user can expect to deposit after fees
     */
    expected_amount_deposit: string;
};

export type QuoteSaverWithdrawResponse = {
    '<<'?: unknown;
    /**
     * generated memo for the withdraw, the client can use this OR send the dust amount
     */
    memo: string;
    /**
     * the dust amount of the target asset the user should send to initialize the withdraw, the client can send this OR provide the memo
     */
    dust_amount: string;
    /**
     * the amount of the target asset the user can expect to withdraw after fees in 1e8 decimals
     */
    expected_amount_out: string;
};

export type QuoteLoanOpenResponse = {
    '<<'?: unknown;
    /**
     * generated memo for the loan open
     */
    memo?: string;
    /**
     * the amount of the target asset the user can expect to receive after fees in 1e8 decimals
     */
    expected_amount_out: string;
    /**
     * the expected collateralization ratio in basis points
     */
    expected_collateralization_ratio: string;
    /**
     * the expected amount of collateral increase on the loan
     */
    expected_collateral_deposited: string;
    /**
     * the expected amount of TOR debt increase on the loan
     */
    expected_debt_issued: string;
    /**
     * The number of blocks involved in the streaming swaps during the open loan process.
     */
    streaming_swap_blocks: number;
    /**
     * The approximate number of seconds taken by the streaming swaps involved in the open loan process.
     */
    streaming_swap_seconds: number;
    /**
     * The total expected duration for a open loan, measured in seconds, which includes the time for inbound confirmation, the duration of streaming swaps, and any outbound delays.
     */
    total_open_loan_seconds: number;
};

export type QuoteLoanCloseResponse = {
    '<<'?: unknown;
    /**
     * generated memo for the loan close
     */
    memo: string;
    /**
     * the amount of collateral asset the user can expect to receive after fees in 1e8 decimals
     */
    expected_amount_out: string;
    /**
     * The quantity of the repayment asset to be sent by the user, calculated as the desired percentage of the loan's value, expressed in units of 1e8
     */
    expected_amount_in: string;
    /**
     * the expected amount of collateral decrease on the loan
     */
    expected_collateral_withdrawn: string;
    /**
     * the expected amount of TOR debt decrease on the loan
     */
    expected_debt_repaid: string;
    /**
     * The number of blocks involved in the streaming swaps during the repayment process.
     */
    streaming_swap_blocks: number;
    /**
     * The approximate number of seconds taken by the streaming swaps involved in the repayment process.
     */
    streaming_swap_seconds: number;
    /**
     * The total expected duration for a repayment, measured in seconds, which includes the time for inbound confirmation, the duration of streaming swaps, and any outbound delays.
     */
    total_repay_seconds: number;
};

/**
 * optional block height, defaults to current tip
 */
export type QueryHeight = number;

export type Name = string;

export type PathHeight = number;

export type Hash = string;

export type Asset = string;

export type Address = string;

export type Pubkey = string;

export type Chain = string;

export type Invariant = string;

export type AccountData = {
    body?: never;
    path: {
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/auth/accounts/{address}';
};

export type AccountResponses = {
    /**
     * OK
     */
    200: AccountResponse;
};

export type AccountResponse2 = AccountResponses[keyof AccountResponses];

export type BalancesData = {
    body?: never;
    path: {
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/bank/balances/{address}';
};

export type BalancesResponses = {
    /**
     * OK
     */
    200: BalancesResponse;
};

export type BalancesResponse2 = BalancesResponses[keyof BalancesResponses];

export type PingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/thorchain/ping';
};

export type PingResponses = {
    /**
     * OK
     */
    200: {
        ping?: string;
    };
};

export type PingResponse = PingResponses[keyof PingResponses];

export type PoolData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/pool/{asset}';
};

export type PoolResponses = {
    /**
     * OK
     */
    200: Pool;
};

export type PoolResponse2 = PoolResponses[keyof PoolResponses];

export type PoolsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/pools';
};

export type PoolsResponses = {
    /**
     * OK
     */
    200: PoolsResponse;
};

export type PoolsResponse2 = PoolsResponses[keyof PoolsResponses];

export type PoolslipData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/slip/{asset}';
};

export type PoolslipResponses = {
    /**
     * OK
     */
    200: PoolSlipResponse;
};

export type PoolslipResponse = PoolslipResponses[keyof PoolslipResponses];

export type PoolslipsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/slips';
};

export type PoolslipsResponses = {
    /**
     * OK
     */
    200: PoolSlipResponse;
};

export type PoolslipsResponse = PoolslipsResponses[keyof PoolslipsResponses];

export type DpoolData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/dpool/{asset}';
};

export type DpoolResponses = {
    /**
     * OK
     */
    200: DerivedPool;
};

export type DpoolResponse = DpoolResponses[keyof DpoolResponses];

export type DpoolsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/dpools';
};

export type DpoolsResponses = {
    /**
     * OK
     */
    200: DerivedPoolsResponse;
};

export type DpoolsResponse = DpoolsResponses[keyof DpoolsResponses];

export type LiquidityProviderData = {
    body?: never;
    path: {
        asset: string;
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/pool/{asset}/liquidity_provider/{address}';
};

export type LiquidityProviderResponses = {
    /**
     * OK
     */
    200: LiquidityProvider;
};

export type LiquidityProviderResponse2 = LiquidityProviderResponses[keyof LiquidityProviderResponses];

export type LiquidityProvidersData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/pool/{asset}/liquidity_providers';
};

export type LiquidityProvidersResponses = {
    /**
     * OK
     */
    200: LiquidityProvidersResponse;
};

export type LiquidityProvidersResponse2 = LiquidityProvidersResponses[keyof LiquidityProvidersResponses];

export type RunePoolData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/runepool';
};

export type RunePoolResponses = {
    /**
     * OK
     */
    200: RunePoolResponse;
};

export type RunePoolResponse2 = RunePoolResponses[keyof RunePoolResponses];

export type RuneProviderData = {
    body?: never;
    path: {
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/rune_provider/{address}';
};

export type RuneProviderResponses = {
    /**
     * OK
     */
    200: RuneProvider;
};

export type RuneProviderResponse2 = RuneProviderResponses[keyof RuneProviderResponses];

export type RuneProvidersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/rune_providers';
};

export type RuneProvidersResponses = {
    /**
     * OK
     */
    200: RuneProvidersResponse;
};

export type RuneProvidersResponse2 = RuneProvidersResponses[keyof RuneProvidersResponses];

export type SaverData = {
    body?: never;
    path: {
        asset: string;
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/pool/{asset}/saver/{address}';
};

export type SaverResponses = {
    /**
     * OK
     */
    200: Saver;
};

export type SaverResponse2 = SaverResponses[keyof SaverResponses];

export type SaversData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/pool/{asset}/savers';
};

export type SaversResponses = {
    /**
     * OK
     */
    200: SaversResponse;
};

export type SaversResponse2 = SaversResponses[keyof SaversResponses];

export type BorrowerData = {
    body?: never;
    path: {
        asset: string;
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/pool/{asset}/borrower/{address}';
};

export type BorrowerResponses = {
    /**
     * OK
     */
    200: Borrower;
};

export type BorrowerResponse2 = BorrowerResponses[keyof BorrowerResponses];

export type BorrowersData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/pool/{asset}/borrowers';
};

export type BorrowersResponses = {
    /**
     * OK
     */
    200: BorrowersResponse;
};

export type BorrowersResponse2 = BorrowersResponses[keyof BorrowersResponses];

export type TxData = {
    body?: never;
    path: {
        hash: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/tx/{hash}';
};

export type TxResponses = {
    /**
     * OK
     */
    200: TxResponse;
};

export type TxResponse2 = TxResponses[keyof TxResponses];

export type TxSignersOldData = {
    body?: never;
    path: {
        hash: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/tx/{hash}/signers';
};

export type TxSignersOldResponses = {
    /**
     * OK
     */
    200: TxSignersResponse;
};

export type TxSignersOldResponse = TxSignersOldResponses[keyof TxSignersOldResponses];

export type TxSignersData = {
    body?: never;
    path: {
        hash: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/tx/details/{hash}';
};

export type TxSignersResponses = {
    /**
     * OK
     */
    200: TxDetailsResponse;
};

export type TxSignersResponse2 = TxSignersResponses[keyof TxSignersResponses];

export type TxStagesData = {
    body?: never;
    path: {
        hash: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/tx/stages/{hash}';
};

export type TxStagesResponses = {
    /**
     * OK
     */
    200: TxStagesResponse;
};

export type TxStagesResponse2 = TxStagesResponses[keyof TxStagesResponses];

export type TxStatusData = {
    body?: never;
    path: {
        hash: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/tx/status/{hash}';
};

export type TxStatusResponses = {
    /**
     * OK
     */
    200: TxStatusResponse;
};

export type TxStatusResponse2 = TxStatusResponses[keyof TxStatusResponses];

export type NodeData = {
    body?: never;
    path: {
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/node/{address}';
};

export type NodeResponses = {
    /**
     * OK
     */
    200: Node;
};

export type NodeResponse2 = NodeResponses[keyof NodeResponses];

export type NodesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/nodes';
};

export type NodesResponses = {
    /**
     * OK
     */
    200: NodesResponse;
};

export type NodesResponse2 = NodesResponses[keyof NodesResponses];

export type AsgardData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/vaults/asgard';
};

export type AsgardResponses = {
    /**
     * OK
     */
    200: VaultsResponse;
};

export type AsgardResponse = AsgardResponses[keyof AsgardResponses];

export type YggdrasilData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/vaults/yggdrasil';
};

export type YggdrasilResponses = {
    /**
     * OK
     */
    200: YggdrasilVaultsResponse;
};

export type YggdrasilResponse = YggdrasilResponses[keyof YggdrasilResponses];

export type VaultData = {
    body?: never;
    path: {
        pubkey: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/vault/{pubkey}';
};

export type VaultResponses = {
    /**
     * OK
     */
    200: Vault;
};

export type VaultResponse2 = VaultResponses[keyof VaultResponses];

export type VaultPubkeysData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/vaults/pubkeys';
};

export type VaultPubkeysResponses = {
    /**
     * OK
     */
    200: VaultPubkeysResponse;
};

export type VaultPubkeysResponse2 = VaultPubkeysResponses[keyof VaultPubkeysResponses];

export type NetworkData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/network';
};

export type NetworkResponses = {
    /**
     * OK
     */
    200: NetworkResponse;
};

export type NetworkResponse2 = NetworkResponses[keyof NetworkResponses];

export type OutboundFeesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/outbound_fees';
};

export type OutboundFeesResponses = {
    /**
     * OK
     */
    200: OutboundFeesResponse;
};

export type OutboundFeesResponse2 = OutboundFeesResponses[keyof OutboundFeesResponses];

export type OutboundFeeAssetData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/outbound_fee/{asset}';
};

export type OutboundFeeAssetResponses = {
    /**
     * OK
     */
    200: OutboundFeesResponse;
};

export type OutboundFeeAssetResponse = OutboundFeeAssetResponses[keyof OutboundFeeAssetResponses];

export type InboundAddressesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/inbound_addresses';
};

export type InboundAddressesResponses = {
    /**
     * OK
     */
    200: InboundAddressesResponse;
};

export type InboundAddressesResponse2 = InboundAddressesResponses[keyof InboundAddressesResponses];

export type LastblockData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/lastblock';
};

export type LastblockResponses = {
    /**
     * OK
     */
    200: LastBlockResponse;
};

export type LastblockResponse = LastblockResponses[keyof LastblockResponses];

export type LastblockChainData = {
    body?: never;
    path: {
        chain: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/lastblock/{chain}';
};

export type LastblockChainResponses = {
    /**
     * OK
     */
    200: LastBlockResponse;
};

export type LastblockChainResponse = LastblockChainResponses[keyof LastblockChainResponses];

export type VersionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/version';
};

export type VersionResponses = {
    /**
     * OK
     */
    200: VersionResponse;
};

export type VersionResponse2 = VersionResponses[keyof VersionResponses];

export type UpgradeProposalsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/upgrade_proposals';
};

export type UpgradeProposalsResponses = {
    /**
     * OK
     */
    200: UpgradeProposalsResponse;
};

export type UpgradeProposalsResponse2 = UpgradeProposalsResponses[keyof UpgradeProposalsResponses];

export type UpgradeProposalData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/upgrade_proposal/{name}';
};

export type UpgradeProposalResponses = {
    /**
     * OK
     */
    200: UpgradeProposal;
};

export type UpgradeProposalResponse2 = UpgradeProposalResponses[keyof UpgradeProposalResponses];

export type UpgradeVotesData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/upgrade_votes/{name}';
};

export type UpgradeVotesResponses = {
    /**
     * OK
     */
    200: UpgradeVotesResponse;
};

export type UpgradeVotesResponse2 = UpgradeVotesResponses[keyof UpgradeVotesResponses];

export type ConstantsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/constants';
};

export type ConstantsResponses = {
    /**
     * OK
     */
    200: ConstantsResponse;
};

export type ConstantsResponse2 = ConstantsResponses[keyof ConstantsResponses];

export type RagnarokData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/ragnarok';
};

export type RagnarokResponses = {
    /**
     * OK
     */
    200: boolean;
};

export type RagnarokResponse = RagnarokResponses[keyof RagnarokResponses];

export type BanData = {
    body?: never;
    path: {
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/ban/{address}';
};

export type BanResponses = {
    /**
     * OK
     */
    200: BanResponse;
};

export type BanResponse2 = BanResponses[keyof BanResponses];

export type StreamSwapData = {
    body?: never;
    path: {
        hash: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/swap/streaming/{hash}';
};

export type StreamSwapResponses = {
    /**
     * OK
     */
    200: StreamingSwap;
};

export type StreamSwapResponse = StreamSwapResponses[keyof StreamSwapResponses];

export type StreamSwapsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/swaps/streaming';
};

export type StreamSwapsResponses = {
    /**
     * OK
     */
    200: StreamingSwapsResponse;
};

export type StreamSwapsResponse = StreamSwapsResponses[keyof StreamSwapsResponses];

export type SwapperCloutData = {
    body?: never;
    path: {
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/clout/swap/{address}';
};

export type SwapperCloutResponses = {
    /**
     * OK
     */
    200: SwapperCloutResponse;
};

export type SwapperCloutResponse2 = SwapperCloutResponses[keyof SwapperCloutResponses];

export type TradeUnitData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/trade/unit/{asset}';
};

export type TradeUnitResponses = {
    /**
     * OK
     */
    200: TradeUnitResponse;
};

export type TradeUnitResponse2 = TradeUnitResponses[keyof TradeUnitResponses];

export type TradeUnitsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/trade/units';
};

export type TradeUnitsResponses = {
    /**
     * OK
     */
    200: TradeUnitsResponse;
};

export type TradeUnitsResponse2 = TradeUnitsResponses[keyof TradeUnitsResponses];

export type TradeAccountData = {
    body?: never;
    path: {
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/trade/account/{address}';
};

export type TradeAccountResponses = {
    /**
     * OK
     */
    200: TradeAccountResponse;
};

export type TradeAccountResponse2 = TradeAccountResponses[keyof TradeAccountResponses];

export type TradeAccountsData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/trade/accounts/{asset}';
};

export type TradeAccountsResponses = {
    /**
     * OK
     */
    200: TradeAccountsResponse;
};

export type TradeAccountsResponse2 = TradeAccountsResponses[keyof TradeAccountsResponses];

export type SecuredAssetData = {
    body?: never;
    path: {
        asset: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/securedasset/{asset}';
};

export type SecuredAssetResponses = {
    /**
     * OK
     */
    200: SecuredAssetResponse;
};

export type SecuredAssetResponse2 = SecuredAssetResponses[keyof SecuredAssetResponses];

export type SecuredAssetsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/securedassets';
};

export type SecuredAssetsResponses = {
    /**
     * OK
     */
    200: SecuredAssetsResponse;
};

export type SecuredAssetsResponse2 = SecuredAssetsResponses[keyof SecuredAssetsResponses];

export type QueueData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/queue';
};

export type QueueResponses = {
    /**
     * OK
     */
    200: QueueResponse;
};

export type QueueResponse2 = QueueResponses[keyof QueueResponses];

export type QueueSwapData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/queue/swap';
};

export type QueueSwapResponses = {
    /**
     * OK
     */
    200: SwapQueueResponse;
};

export type QueueSwapResponse = QueueSwapResponses[keyof QueueSwapResponses];

export type QueueScheduledData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/queue/scheduled';
};

export type QueueScheduledResponses = {
    /**
     * OK
     */
    200: ScheduledResponse;
};

export type QueueScheduledResponse = QueueScheduledResponses[keyof QueueScheduledResponses];

export type QueueOutboundData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/queue/outbound';
};

export type QueueOutboundResponses = {
    /**
     * OK
     */
    200: OutboundResponse;
};

export type QueueOutboundResponse = QueueOutboundResponses[keyof QueueOutboundResponses];

export type KeysignData = {
    body?: never;
    path: {
        height: number;
    };
    query?: never;
    url: '/thorchain/keysign/{height}';
};

export type KeysignResponses = {
    /**
     * OK
     */
    200: KeysignResponse;
};

export type KeysignResponse2 = KeysignResponses[keyof KeysignResponses];

export type KeysignPubkeyData = {
    body?: never;
    path: {
        height: number;
        pubkey: string;
    };
    query?: never;
    url: '/thorchain/keysign/{height}/{pubkey}';
};

export type KeysignPubkeyResponses = {
    /**
     * OK
     */
    200: KeysignResponse;
};

export type KeysignPubkeyResponse = KeysignPubkeyResponses[keyof KeysignPubkeyResponses];

export type KeygenPubkeyData = {
    body?: never;
    path: {
        height: number;
        pubkey: string;
    };
    query?: never;
    url: '/thorchain/keygen/{height}/{pubkey}';
};

export type KeygenPubkeyResponses = {
    /**
     * OK
     */
    200: KeygenResponse;
};

export type KeygenPubkeyResponse = KeygenPubkeyResponses[keyof KeygenPubkeyResponses];

export type MetricsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/metrics';
};

export type MetricsResponses = {
    /**
     * OK
     */
    200: MetricsResponse;
};

export type MetricsResponse2 = MetricsResponses[keyof MetricsResponses];

export type MetricsKeygenData = {
    body?: never;
    path: {
        pubkey: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/metric/keygen/{pubkey}';
};

export type MetricsKeygenResponses = {
    /**
     * OK
     */
    200: KeygenMetricsResponse;
};

export type MetricsKeygenResponse = MetricsKeygenResponses[keyof MetricsKeygenResponses];

export type ThornameData = {
    body?: never;
    path: {
        /**
         * the thornode to lookup
         */
        name: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/thorname/{name}';
};

export type ThornameResponses = {
    /**
     * OK
     */
    200: Thorname;
};

export type ThornameResponse2 = ThornameResponses[keyof ThornameResponses];

export type MimirData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/mimir';
};

export type MimirResponses = {
    /**
     * OK
     */
    200: MimirResponse;
};

export type MimirResponse2 = MimirResponses[keyof MimirResponses];

export type MimirKeyData = {
    body?: never;
    path: {
        /**
         * the mimir key to lookup
         */
        key: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/mimir/key/{key}';
};

export type MimirKeyResponses = {
    /**
     * OK
     */
    200: number;
};

export type MimirKeyResponse = MimirKeyResponses[keyof MimirKeyResponses];

export type MimirAdminData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/mimir/admin';
};

export type MimirAdminResponses = {
    /**
     * OK
     */
    200: MimirResponse;
};

export type MimirAdminResponse = MimirAdminResponses[keyof MimirAdminResponses];

export type MimirNodesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/mimir/nodes_all';
};

export type MimirNodesResponses = {
    /**
     * OK
     */
    200: MimirNodesResponse;
};

export type MimirNodesResponse2 = MimirNodesResponses[keyof MimirNodesResponses];

export type MimirNodeData = {
    body?: never;
    path: {
        address: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/mimir/node/{address}';
};

export type MimirNodeResponses = {
    /**
     * OK
     */
    200: MimirResponse;
};

export type MimirNodeResponse = MimirNodeResponses[keyof MimirNodeResponses];

export type QuoteswapData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
        /**
         * the source asset
         */
        from_asset?: string;
        /**
         * the target asset
         */
        to_asset?: string;
        /**
         * the source asset amount in 1e8 decimals
         */
        amount?: number;
        /**
         * the destination address, required to generate memo
         */
        destination?: string;
        /**
         * the refund address, refunds will be sent here if the swap fails
         */
        refund_address?: string;
        /**
         * the interval in which streaming swaps are swapped
         */
        streaming_interval?: number;
        /**
         * the quantity of swaps within a streaming swap
         */
        streaming_quantity?: number;
        /**
         * the maximum basis points from the current feeless swap price to set the limit in the generated memo
         */
        tolerance_bps?: number;
        /**
         * the maximum basis points of tolerance for pool price movements to set the limit in the generated memo
         */
        liquidity_tolerance_bps?: number;
        /**
         * the affiliate fee in basis points
         */
        affiliate_bps?: number;
        /**
         * the affiliate (address or thorname)
         */
        affiliate?: string;
    };
    url: '/thorchain/quote/swap';
};

export type QuoteswapResponses = {
    /**
     * OK
     */
    200: QuoteSwapResponse;
};

export type QuoteswapResponse = QuoteswapResponses[keyof QuoteswapResponses];

export type QuotesaverdepositData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
        /**
         * the asset to deposit
         */
        asset?: string;
        /**
         * the source asset amount in 1e8 decimals
         */
        amount?: number;
    };
    url: '/thorchain/quote/saver/deposit';
};

export type QuotesaverdepositResponses = {
    /**
     * OK
     */
    200: QuoteSaverDepositResponse;
};

export type QuotesaverdepositResponse = QuotesaverdepositResponses[keyof QuotesaverdepositResponses];

export type QuotesaverwithdrawData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
        /**
         * the asset to withdraw
         */
        asset?: string;
        /**
         * the address for the position
         */
        address?: string;
        /**
         * the basis points of the existing position to withdraw
         */
        withdraw_bps?: number;
    };
    url: '/thorchain/quote/saver/withdraw';
};

export type QuotesaverwithdrawResponses = {
    /**
     * OK
     */
    200: QuoteSaverWithdrawResponse;
};

export type QuotesaverwithdrawResponse = QuotesaverwithdrawResponses[keyof QuotesaverwithdrawResponses];

export type QuoteloanopenData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
        /**
         * the collateral asset
         */
        from_asset?: string;
        /**
         * the collateral asset amount in 1e8 decimals
         */
        amount?: number;
        /**
         * the target asset to receive (loan denominated in TOR regardless)
         */
        to_asset?: string;
        /**
         * the destination address, required to generate memo
         */
        destination?: string;
        /**
         * the minimum amount of the target asset to accept
         */
        min_out?: string;
        /**
         * the affiliate fee in basis points
         */
        affiliate_bps?: number;
        /**
         * the affiliate (address or thorname)
         */
        affiliate?: string;
    };
    url: '/thorchain/quote/loan/open';
};

export type QuoteloanopenResponses = {
    /**
     * OK
     */
    200: QuoteLoanOpenResponse;
};

export type QuoteloanopenResponse = QuoteloanopenResponses[keyof QuoteloanopenResponses];

export type QuoteloancloseData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
        /**
         * the asset used to repay the loan
         */
        from_asset?: string;
        /**
         * the basis points of the existing position to repay
         */
        repay_bps?: number;
        /**
         * the collateral asset of the loan
         */
        to_asset?: string;
        /**
         * the owner of the loan collateral
         */
        loan_owner?: string;
        /**
         * the minimum amount of the target asset to accept
         */
        min_out?: string;
    };
    url: '/thorchain/quote/loan/close';
};

export type QuoteloancloseResponses = {
    /**
     * OK
     */
    200: QuoteLoanCloseResponse;
};

export type QuoteloancloseResponse = QuoteloancloseResponses[keyof QuoteloancloseResponses];

export type InvariantData = {
    body?: never;
    path: {
        invariant: string;
    };
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/invariant/{invariant}';
};

export type InvariantResponses = {
    /**
     * OK
     */
    200: InvariantResponse;
};

export type InvariantResponse2 = InvariantResponses[keyof InvariantResponses];

export type InvariantsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/invariants';
};

export type InvariantsResponses = {
    /**
     * OK
     */
    200: InvariantsResponse;
};

export type InvariantsResponse2 = InvariantsResponses[keyof InvariantsResponses];

export type BlockData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * optional block height, defaults to current tip
         */
        height?: number;
    };
    url: '/thorchain/block';
};

export type BlockResponses = {
    /**
     * OK
     */
    200: BlockResponse;
};

export type BlockResponse2 = BlockResponses[keyof BlockResponses];

export type ExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/thorchain/export';
};

export type ExportResponses = {
    /**
     * OK
     */
    200: ExportResponse;
};

export type ExportResponse2 = ExportResponses[keyof ExportResponses];

export type ClientOptions = {
    baseUrl: 'https://thornode.ninerealms.com' | (string & {});
};
