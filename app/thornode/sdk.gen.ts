// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { AccountData, AccountResponse2, BalancesData, BalancesResponse2, PingData, PingResponse, PoolData, PoolResponse2, PoolsData, PoolsResponse2, PoolslipData, PoolslipResponse, PoolslipsData, PoolslipsResponse, DpoolData, DpoolResponse, DpoolsData, DpoolsResponse, LiquidityProviderData, LiquidityProviderResponse2, LiquidityProvidersData, LiquidityProvidersResponse2, RunePoolData, RunePoolResponse2, RuneProviderData, RuneProviderResponse2, RuneProvidersData, RuneProvidersResponse2, SaverData, SaverResponse2, SaversData, SaversResponse2, BorrowerData, BorrowerResponse2, BorrowersData, BorrowersResponse2, TxData, TxResponse2, TxSignersOldData, TxSignersOldResponse, TxSignersData, TxSignersResponse2, TxStagesData, TxStagesResponse2, TxStatusData, TxStatusResponse2, NodeData, NodeResponse2, NodesData, NodesResponse2, AsgardData, AsgardResponse, YggdrasilData, YggdrasilResponse, VaultData, VaultResponse2, VaultPubkeysData, VaultPubkeysResponse2, NetworkData, NetworkResponse2, OutboundFeesData, OutboundFeesResponse2, OutboundFeeAssetData, OutboundFeeAssetResponse, InboundAddressesData, InboundAddressesResponse2, LastblockData, LastblockResponse, LastblockChainData, LastblockChainResponse, VersionData, VersionResponse2, UpgradeProposalsData, UpgradeProposalsResponse2, UpgradeProposalData, UpgradeProposalResponse2, UpgradeVotesData, UpgradeVotesResponse2, ConstantsData, ConstantsResponse2, RagnarokData, RagnarokResponse, BanData, BanResponse2, StreamSwapData, StreamSwapResponse, StreamSwapsData, StreamSwapsResponse, SwapperCloutData, SwapperCloutResponse2, TradeUnitData, TradeUnitResponse2, TradeUnitsData, TradeUnitsResponse2, TradeAccountData, TradeAccountResponse2, TradeAccountsData, TradeAccountsResponse2, SecuredAssetData, SecuredAssetResponse2, SecuredAssetsData, SecuredAssetsResponse2, QueueData, QueueResponse2, QueueSwapData, QueueSwapResponse, QueueScheduledData, QueueScheduledResponse, QueueOutboundData, QueueOutboundResponse, KeysignData, KeysignResponse2, KeysignPubkeyData, KeysignPubkeyResponse, KeygenPubkeyData, KeygenPubkeyResponse, MetricsData, MetricsResponse2, MetricsKeygenData, MetricsKeygenResponse, ThornameData, ThornameResponse2, MimirData, MimirResponse2, MimirKeyData, MimirKeyResponse, MimirAdminData, MimirAdminResponse, MimirNodesData, MimirNodesResponse2, MimirNodeData, MimirNodeResponse, QuoteswapData, QuoteswapResponse, QuotesaverdepositData, QuotesaverdepositResponse, QuotesaverwithdrawData, QuotesaverwithdrawResponse, QuoteloanopenData, QuoteloanopenResponse, QuoteloancloseData, QuoteloancloseResponse, InvariantData, InvariantResponse2, InvariantsData, InvariantsResponse2, BlockData, BlockResponse2, ExportData, ExportResponse2 } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Returns account information for the provided address.
 */
export const account = <ThrowOnError extends boolean = false>(options: Options<AccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountResponse2, unknown, ThrowOnError>({
        url: '/auth/accounts/{address}',
        ...options
    });
};

/**
 * Returns balances for the provided address.
 */
export const balances = <ThrowOnError extends boolean = false>(options: Options<BalancesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BalancesResponse2, unknown, ThrowOnError>({
        url: '/bank/balances/{address}',
        ...options
    });
};

export const ping = <ThrowOnError extends boolean = false>(options?: Options<PingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingResponse, unknown, ThrowOnError>({
        url: '/thorchain/ping',
        ...options
    });
};

/**
 * Returns the pool information for the provided asset.
 */
export const pool = <ThrowOnError extends boolean = false>(options: Options<PoolData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PoolResponse2, unknown, ThrowOnError>({
        url: '/thorchain/pool/{asset}',
        ...options
    });
};

/**
 * Returns the pool information for all assets.
 */
export const pools = <ThrowOnError extends boolean = false>(options?: Options<PoolsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PoolsResponse2, unknown, ThrowOnError>({
        url: '/thorchain/pools',
        ...options
    });
};

/**
 * Returns the pool slip information for the provided asset.
 */
export const poolslip = <ThrowOnError extends boolean = false>(options: Options<PoolslipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PoolslipResponse, unknown, ThrowOnError>({
        url: '/thorchain/slip/{asset}',
        ...options
    });
};

/**
 * Returns the pool slip information for all Available Layer 1 pool assets.
 */
export const poolslips = <ThrowOnError extends boolean = false>(options?: Options<PoolslipsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PoolslipsResponse, unknown, ThrowOnError>({
        url: '/thorchain/slips',
        ...options
    });
};

/**
 * Returns the pool information for the provided derived asset.
 */
export const dpool = <ThrowOnError extends boolean = false>(options: Options<DpoolData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DpoolResponse, unknown, ThrowOnError>({
        url: '/thorchain/dpool/{asset}',
        ...options
    });
};

/**
 * Returns the pool information for all derived assets.
 */
export const dpools = <ThrowOnError extends boolean = false>(options?: Options<DpoolsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DpoolsResponse, unknown, ThrowOnError>({
        url: '/thorchain/dpools',
        ...options
    });
};

/**
 * Returns the liquidity provider information for an address and asset.
 */
export const liquidityProvider = <ThrowOnError extends boolean = false>(options: Options<LiquidityProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LiquidityProviderResponse2, unknown, ThrowOnError>({
        url: '/thorchain/pool/{asset}/liquidity_provider/{address}',
        ...options
    });
};

/**
 * Returns all liquidity provider information for an asset.
 */
export const liquidityProviders = <ThrowOnError extends boolean = false>(options: Options<LiquidityProvidersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LiquidityProvidersResponse2, unknown, ThrowOnError>({
        url: '/thorchain/pool/{asset}/liquidity_providers',
        ...options
    });
};

/**
 * Returns the pool information for the RUNE pool.
 */
export const runePool = <ThrowOnError extends boolean = false>(options?: Options<RunePoolData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RunePoolResponse2, unknown, ThrowOnError>({
        url: '/thorchain/runepool',
        ...options
    });
};

/**
 * Returns the RUNE Provider information for an address.
 */
export const runeProvider = <ThrowOnError extends boolean = false>(options: Options<RuneProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RuneProviderResponse2, unknown, ThrowOnError>({
        url: '/thorchain/rune_provider/{address}',
        ...options
    });
};

/**
 * Returns all RUNE Providers.
 */
export const runeProviders = <ThrowOnError extends boolean = false>(options?: Options<RuneProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RuneProvidersResponse2, unknown, ThrowOnError>({
        url: '/thorchain/rune_providers',
        ...options
    });
};

/**
 * Returns the saver position given then savers pool and address.
 */
export const saver = <ThrowOnError extends boolean = false>(options: Options<SaverData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SaverResponse2, unknown, ThrowOnError>({
        url: '/thorchain/pool/{asset}/saver/{address}',
        ...options
    });
};

/**
 * Returns all savers for the savers pool.
 */
export const savers = <ThrowOnError extends boolean = false>(options: Options<SaversData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SaversResponse2, unknown, ThrowOnError>({
        url: '/thorchain/pool/{asset}/savers',
        ...options
    });
};

/**
 * Returns the borrower position given the pool and address.
 */
export const borrower = <ThrowOnError extends boolean = false>(options: Options<BorrowerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BorrowerResponse2, unknown, ThrowOnError>({
        url: '/thorchain/pool/{asset}/borrower/{address}',
        ...options
    });
};

/**
 * Returns all borrowers for the given pool.
 */
export const borrowers = <ThrowOnError extends boolean = false>(options: Options<BorrowersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BorrowersResponse2, unknown, ThrowOnError>({
        url: '/thorchain/pool/{asset}/borrowers',
        ...options
    });
};

/**
 * Returns the observed transaction for a provided inbound or outbound hash.
 */
export const tx = <ThrowOnError extends boolean = false>(options: Options<TxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TxResponse2, unknown, ThrowOnError>({
        url: '/thorchain/tx/{hash}',
        ...options
    });
};

/**
 * Deprecated - migrate to /thorchain/tx/details.
 */
export const txSignersOld = <ThrowOnError extends boolean = false>(options: Options<TxSignersOldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TxSignersOldResponse, unknown, ThrowOnError>({
        url: '/thorchain/tx/{hash}/signers',
        ...options
    });
};

/**
 * Returns the signers for a provided inbound or outbound hash.
 */
export const txSigners = <ThrowOnError extends boolean = false>(options: Options<TxSignersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TxSignersResponse2, unknown, ThrowOnError>({
        url: '/thorchain/tx/details/{hash}',
        ...options
    });
};

/**
 * Returns the processing stages of a provided inbound hash.
 */
export const txStages = <ThrowOnError extends boolean = false>(options: Options<TxStagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TxStagesResponse2, unknown, ThrowOnError>({
        url: '/thorchain/tx/stages/{hash}',
        ...options
    });
};

/**
 * Returns the status of a provided inbound hash.
 */
export const txStatus = <ThrowOnError extends boolean = false>(options: Options<TxStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TxStatusResponse2, unknown, ThrowOnError>({
        url: '/thorchain/tx/status/{hash}',
        ...options
    });
};

/**
 * Returns node information for the provided node address.
 */
export const node = <ThrowOnError extends boolean = false>(options: Options<NodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NodeResponse2, unknown, ThrowOnError>({
        url: '/thorchain/node/{address}',
        ...options
    });
};

/**
 * Returns node information for all registered validators.
 */
export const nodes = <ThrowOnError extends boolean = false>(options?: Options<NodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NodesResponse2, unknown, ThrowOnError>({
        url: '/thorchain/nodes',
        ...options
    });
};

/**
 * Returns current asgard vaults.
 */
export const asgard = <ThrowOnError extends boolean = false>(options?: Options<AsgardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AsgardResponse, unknown, ThrowOnError>({
        url: '/thorchain/vaults/asgard',
        ...options
    });
};

/**
 * Returns current yggdrasil vaults.
 */
export const yggdrasil = <ThrowOnError extends boolean = false>(options?: Options<YggdrasilData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<YggdrasilResponse, unknown, ThrowOnError>({
        url: '/thorchain/vaults/yggdrasil',
        ...options
    });
};

/**
 * Returns the vault for the provided pubkey.
 */
export const vault = <ThrowOnError extends boolean = false>(options: Options<VaultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VaultResponse2, unknown, ThrowOnError>({
        url: '/thorchain/vault/{pubkey}',
        ...options
    });
};

/**
 * Returns all pubkeys for current vaults.
 */
export const vaultPubkeys = <ThrowOnError extends boolean = false>(options?: Options<VaultPubkeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VaultPubkeysResponse2, unknown, ThrowOnError>({
        url: '/thorchain/vaults/pubkeys',
        ...options
    });
};

/**
 * Returns network overview statistics.
 */
export const network = <ThrowOnError extends boolean = false>(options?: Options<NetworkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NetworkResponse2, unknown, ThrowOnError>({
        url: '/thorchain/network',
        ...options
    });
};

/**
 * Returns the last block information for all chains.
 */
export const outboundFees = <ThrowOnError extends boolean = false>(options?: Options<OutboundFeesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OutboundFeesResponse2, unknown, ThrowOnError>({
        url: '/thorchain/outbound_fees',
        ...options
    });
};

/**
 * Returns the outbound fee information for the provided asset.
 */
export const outboundFeeAsset = <ThrowOnError extends boolean = false>(options: Options<OutboundFeeAssetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OutboundFeeAssetResponse, unknown, ThrowOnError>({
        url: '/thorchain/outbound_fee/{asset}',
        ...options
    });
};

/**
 * Returns the set of asgard addresses that should be used for inbound transactions.
 */
export const inboundAddresses = <ThrowOnError extends boolean = false>(options?: Options<InboundAddressesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InboundAddressesResponse2, unknown, ThrowOnError>({
        url: '/thorchain/inbound_addresses',
        ...options
    });
};

/**
 * Returns the last block information for all chains.
 */
export const lastblock = <ThrowOnError extends boolean = false>(options?: Options<LastblockData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LastblockResponse, unknown, ThrowOnError>({
        url: '/thorchain/lastblock',
        ...options
    });
};

/**
 * Returns the last block information for the provided chain.
 */
export const lastblockChain = <ThrowOnError extends boolean = false>(options: Options<LastblockChainData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LastblockChainResponse, unknown, ThrowOnError>({
        url: '/thorchain/lastblock/{chain}',
        ...options
    });
};

/**
 * Returns the network's current THORNode version, the network's next THORNode version, and the querier's THORNode version.
 */
export const version = <ThrowOnError extends boolean = false>(options?: Options<VersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VersionResponse2, unknown, ThrowOnError>({
        url: '/thorchain/version',
        ...options
    });
};

/**
 * Returns the current upgrade proposals.
 */
export const upgradeProposals = <ThrowOnError extends boolean = false>(options?: Options<UpgradeProposalsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UpgradeProposalsResponse2, unknown, ThrowOnError>({
        url: '/thorchain/upgrade_proposals',
        ...options
    });
};

/**
 * Returns the upgrade proposal for the provided name.
 */
export const upgradeProposal = <ThrowOnError extends boolean = false>(options: Options<UpgradeProposalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UpgradeProposalResponse2, unknown, ThrowOnError>({
        url: '/thorchain/upgrade_proposal/{name}',
        ...options
    });
};

/**
 * Returns the upgrade votes for the provided name.
 */
export const upgradeVotes = <ThrowOnError extends boolean = false>(options: Options<UpgradeVotesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UpgradeVotesResponse2, unknown, ThrowOnError>({
        url: '/thorchain/upgrade_votes/{name}',
        ...options
    });
};

/**
 * Returns constant configuration, can be overridden by mimir.
 */
export const constants = <ThrowOnError extends boolean = false>(options?: Options<ConstantsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConstantsResponse2, unknown, ThrowOnError>({
        url: '/thorchain/constants',
        ...options
    });
};

/**
 * Returns a boolean indicating whether the chain is in ragnarok.
 */
export const ragnarok = <ThrowOnError extends boolean = false>(options?: Options<RagnarokData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RagnarokResponse, unknown, ThrowOnError>({
        url: '/thorchain/ragnarok',
        ...options
    });
};

/**
 * Returns the ban status for the provided node address.
 */
export const ban = <ThrowOnError extends boolean = false>(options: Options<BanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BanResponse2, unknown, ThrowOnError>({
        url: '/thorchain/ban/{address}',
        ...options
    });
};

/**
 * Returns the state of a streaming swap
 */
export const streamSwap = <ThrowOnError extends boolean = false>(options: Options<StreamSwapData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StreamSwapResponse, unknown, ThrowOnError>({
        url: '/thorchain/swap/streaming/{hash}',
        ...options
    });
};

/**
 * Returns the state of all streaming swaps
 */
export const streamSwaps = <ThrowOnError extends boolean = false>(options?: Options<StreamSwapsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StreamSwapsResponse, unknown, ThrowOnError>({
        url: '/thorchain/swaps/streaming',
        ...options
    });
};

/**
 * Returns the clout score of an address
 */
export const swapperClout = <ThrowOnError extends boolean = false>(options: Options<SwapperCloutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SwapperCloutResponse2, unknown, ThrowOnError>({
        url: '/thorchain/clout/swap/{address}',
        ...options
    });
};

/**
 * Returns the total units and depth of a trade asset
 */
export const tradeUnit = <ThrowOnError extends boolean = false>(options: Options<TradeUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TradeUnitResponse2, unknown, ThrowOnError>({
        url: '/thorchain/trade/unit/{asset}',
        ...options
    });
};

/**
 * Returns the total units and depth for each trade asset
 */
export const tradeUnits = <ThrowOnError extends boolean = false>(options?: Options<TradeUnitsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TradeUnitsResponse2, unknown, ThrowOnError>({
        url: '/thorchain/trade/units',
        ...options
    });
};

/**
 * Returns the units and depth of a trade account
 */
export const tradeAccount = <ThrowOnError extends boolean = false>(options: Options<TradeAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TradeAccountResponse2, unknown, ThrowOnError>({
        url: '/thorchain/trade/account/{address}',
        ...options
    });
};

/**
 * Returns all trade accounts for an asset
 */
export const tradeAccounts = <ThrowOnError extends boolean = false>(options: Options<TradeAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TradeAccountsResponse2, unknown, ThrowOnError>({
        url: '/thorchain/trade/accounts/{asset}',
        ...options
    });
};

/**
 * Returns the total size and ratio of a secured asset
 */
export const securedAsset = <ThrowOnError extends boolean = false>(options: Options<SecuredAssetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SecuredAssetResponse2, unknown, ThrowOnError>({
        url: '/thorchain/securedasset/{asset}',
        ...options
    });
};

/**
 * Returns the total size and ratio of all secured asset
 */
export const securedAssets = <ThrowOnError extends boolean = false>(options?: Options<SecuredAssetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SecuredAssetsResponse2, unknown, ThrowOnError>({
        url: '/thorchain/securedassets',
        ...options
    });
};

/**
 * Returns queue statistics.
 */
export const queue = <ThrowOnError extends boolean = false>(options?: Options<QueueData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QueueResponse2, unknown, ThrowOnError>({
        url: '/thorchain/queue',
        ...options
    });
};

/**
 * Returns the swap queue.
 */
export const queueSwap = <ThrowOnError extends boolean = false>(options?: Options<QueueSwapData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QueueSwapResponse, unknown, ThrowOnError>({
        url: '/thorchain/queue/swap',
        ...options
    });
};

/**
 * Returns the scheduled queue.
 */
export const queueScheduled = <ThrowOnError extends boolean = false>(options?: Options<QueueScheduledData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QueueScheduledResponse, unknown, ThrowOnError>({
        url: '/thorchain/queue/scheduled',
        ...options
    });
};

/**
 * Returns the outbound queue including estimated RUNE values.
 */
export const queueOutbound = <ThrowOnError extends boolean = false>(options?: Options<QueueOutboundData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QueueOutboundResponse, unknown, ThrowOnError>({
        url: '/thorchain/queue/outbound',
        ...options
    });
};

/**
 * Returns keysign information for the provided height - the height being the first block a tx out item appears in the signed-but-unobserved outbound queue.
 */
export const keysign = <ThrowOnError extends boolean = false>(options: Options<KeysignData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<KeysignResponse2, unknown, ThrowOnError>({
        url: '/thorchain/keysign/{height}',
        ...options
    });
};

/**
 * Returns keysign information for the provided height and pubkey - the height being the block at which a tx out item is scheduled to be signed and moved from the scheduled outbound queue to the outbound queue.
 */
export const keysignPubkey = <ThrowOnError extends boolean = false>(options: Options<KeysignPubkeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<KeysignPubkeyResponse, unknown, ThrowOnError>({
        url: '/thorchain/keysign/{height}/{pubkey}',
        ...options
    });
};

/**
 * Returns keygen information for the provided height and pubkey - the pubkey being of one of the members of a keygen block for that height
 */
export const keygenPubkey = <ThrowOnError extends boolean = false>(options: Options<KeygenPubkeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<KeygenPubkeyResponse, unknown, ThrowOnError>({
        url: '/thorchain/keygen/{height}/{pubkey}',
        ...options
    });
};

/**
 * Returns keygen and keysign metrics for current vaults.
 */
export const metrics = <ThrowOnError extends boolean = false>(options?: Options<MetricsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MetricsResponse2, unknown, ThrowOnError>({
        url: '/thorchain/metrics',
        ...options
    });
};

/**
 * Returns keygen metrics for the provided vault pubkey.
 */
export const metricsKeygen = <ThrowOnError extends boolean = false>(options: Options<MetricsKeygenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MetricsKeygenResponse, unknown, ThrowOnError>({
        url: '/thorchain/metric/keygen/{pubkey}',
        ...options
    });
};

/**
 * Returns addresses registered to the provided thorname.
 */
export const thorname = <ThrowOnError extends boolean = false>(options: Options<ThornameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ThornameResponse2, unknown, ThrowOnError>({
        url: '/thorchain/thorname/{name}',
        ...options
    });
};

/**
 * Returns current active mimir configuration.
 */
export const mimir = <ThrowOnError extends boolean = false>(options?: Options<MimirData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MimirResponse2, unknown, ThrowOnError>({
        url: '/thorchain/mimir',
        ...options
    });
};

/**
 * Returns current active mimir configuration for the provided key.
 */
export const mimirKey = <ThrowOnError extends boolean = false>(options: Options<MimirKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MimirKeyResponse, unknown, ThrowOnError>({
        url: '/thorchain/mimir/key/{key}',
        ...options
    });
};

/**
 * Returns current admin mimir configuration.
 */
export const mimirAdmin = <ThrowOnError extends boolean = false>(options?: Options<MimirAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MimirAdminResponse, unknown, ThrowOnError>({
        url: '/thorchain/mimir/admin',
        ...options
    });
};

/**
 * Returns current node mimir votes.
 */
export const mimirNodes = <ThrowOnError extends boolean = false>(options?: Options<MimirNodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MimirNodesResponse2, unknown, ThrowOnError>({
        url: '/thorchain/mimir/nodes_all',
        ...options
    });
};

/**
 * Returns current node mimir configuration for the provided node address.
 */
export const mimirNode = <ThrowOnError extends boolean = false>(options: Options<MimirNodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MimirNodeResponse, unknown, ThrowOnError>({
        url: '/thorchain/mimir/node/{address}',
        ...options
    });
};

/**
 * Provide a quote estimate for the provided swap.
 */
export const quoteswap = <ThrowOnError extends boolean = false>(options?: Options<QuoteswapData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QuoteswapResponse, unknown, ThrowOnError>({
        url: '/thorchain/quote/swap',
        ...options
    });
};

/**
 * Provide a quote estimate for the provided saver deposit.
 */
export const quotesaverdeposit = <ThrowOnError extends boolean = false>(options?: Options<QuotesaverdepositData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QuotesaverdepositResponse, unknown, ThrowOnError>({
        url: '/thorchain/quote/saver/deposit',
        ...options
    });
};

/**
 * Provide a quote estimate for the provided saver withdraw.
 */
export const quotesaverwithdraw = <ThrowOnError extends boolean = false>(options?: Options<QuotesaverwithdrawData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QuotesaverwithdrawResponse, unknown, ThrowOnError>({
        url: '/thorchain/quote/saver/withdraw',
        ...options
    });
};

/**
 * Provide a quote estimate for the provided loan open.
 */
export const quoteloanopen = <ThrowOnError extends boolean = false>(options?: Options<QuoteloanopenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QuoteloanopenResponse, unknown, ThrowOnError>({
        url: '/thorchain/quote/loan/open',
        ...options
    });
};

/**
 * Provide a quote estimate for the provided loan close.
 */
export const quoteloanclose = <ThrowOnError extends boolean = false>(options?: Options<QuoteloancloseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QuoteloancloseResponse, unknown, ThrowOnError>({
        url: '/thorchain/quote/loan/close',
        ...options
    });
};

/**
 * Returns result of running the given invariant.
 */
export const invariant = <ThrowOnError extends boolean = false>(options: Options<InvariantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvariantResponse2, unknown, ThrowOnError>({
        url: '/thorchain/invariant/{invariant}',
        ...options
    });
};

/**
 * Returns a list of available invariants.
 */
export const invariants = <ThrowOnError extends boolean = false>(options?: Options<InvariantsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvariantsResponse2, unknown, ThrowOnError>({
        url: '/thorchain/invariants',
        ...options
    });
};

/**
 * Returns verbose details of the block.
 */
export const block = <ThrowOnError extends boolean = false>(options?: Options<BlockData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlockResponse2, unknown, ThrowOnError>({
        url: '/thorchain/block',
        ...options
    });
};

/**
 * Returns genesis export
 */
export const export_ = <ThrowOnError extends boolean = false>(options?: Options<ExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ExportResponse2, unknown, ThrowOnError>({
        url: '/thorchain/export',
        ...options
    });
};