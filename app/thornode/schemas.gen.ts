// This file is auto-generated by @hey-api/openapi-ts

export const BanResponseSchema = {
    properties: {
        block_height: {
            format: 'int64',
            type: 'integer'
        },
        node_address: {
            example: 'thor1f3s7q037eancht7sg0aj995dht25rwrnu4ats5',
            type: 'string'
        },
        signers: {
            items: {
                example: 'thor1f3s7q037eancht7sg0aj995dht25rwrnu4ats5',
                type: 'string'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const BlockResponseSchema = {
    properties: {
        begin_block_events: {
            items: {
                additionalProperties: {
                    type: 'string'
                },
                type: 'object'
            },
            type: 'array'
        },
        end_block_events: {
            items: {
                additionalProperties: {
                    type: 'string'
                },
                type: 'object'
            },
            type: 'array'
        },
        header: {
            properties: {
                app_hash: {
                    example: '223BF64D4A01074DC523A80E76B9BBC786C791FB0A1893AC5B14866356FCFD6C',
                    type: 'string'
                },
                chain_id: {
                    example: 'cosmoshub-2',
                    type: 'string'
                },
                consensus_hash: {
                    example: '0F2908883A105C793B74495EB7D6DF2EEA479ED7FC9349206A65CB0F9987A0B8',
                    type: 'string'
                },
                data_hash: {
                    example: '970886F99E77ED0D60DA8FCE0447C2676E59F2F77302B0C4AA10E1D02F18EF73',
                    type: 'string'
                },
                evidence_hash: {
                    example: '',
                    type: 'string'
                },
                height: {
                    example: 123,
                    format: 'int64',
                    type: 'integer'
                },
                last_block_id: {
                    properties: {
                        hash: {
                            example: '112BC173FD838FB68EB43476816CD7B4C6661B6884A9E357B417EE957E1CF8F7',
                            type: 'string'
                        },
                        parts: {
                            properties: {
                                hash: {
                                    example: '38D4B26B5B725C4F13571EFE022C030390E4C33C8CF6F88EDD142EA769642DBD',
                                    type: 'string'
                                },
                                total: {
                                    example: 1,
                                    format: 'int64',
                                    type: 'integer'
                                }
                            },
                            required: ['total', 'hash'],
                            type: 'object'
                        }
                    },
                    required: ['hash', 'parts'],
                    type: 'object'
                },
                last_commit_hash: {
                    example: '21B9BC845AD2CB2C4193CDD17BFC506F1EBE5A7402E84AD96E64171287A34812',
                    type: 'string'
                },
                last_results_hash: {
                    example: '',
                    type: 'string'
                },
                next_validators_hash: {
                    example: 'D658BFD100CA8025CFD3BECFE86194322731D387286FBD26E059115FD5F2BCA0',
                    type: 'string'
                },
                proposer_address: {
                    example: 'D540AB022088612AC74B287D076DBFBC4A377A2E',
                    type: 'string'
                },
                time: {
                    example: '2019-04-22T17:01:51.701356223Z',
                    type: 'string'
                },
                validators_hash: {
                    example: 'D658BFD100CA8025CFD3BECFE86194322731D387286FBD26E059115FD5F2BCA0',
                    type: 'string'
                },
                version: {
                    properties: {
                        app: {
                            example: '0',
                            type: 'string'
                        },
                        block: {
                            example: '10',
                            type: 'string'
                        }
                    },
                    required: ['block', 'app'],
                    type: 'object'
                }
            },
            required: ['version', 'chain_id', 'height', 'time', 'last_block_id', 'last_commit_hash', 'data_hash', 'validators_hash', 'next_validators_hash', 'consensus_hash', 'app_hash', 'last_results_hash', 'evidence_hash', 'proposer_address'],
            type: 'object'
        },
        id: {
            properties: {
                hash: {
                    example: '112BC173FD838FB68EB43476816CD7B4C6661B6884A9E357B417EE957E1CF8F7',
                    type: 'string'
                },
                parts: {
                    properties: {
                        hash: {
                            example: '38D4B26B5B725C4F13571EFE022C030390E4C33C8CF6F88EDD142EA769642DBD',
                            type: 'string'
                        },
                        total: {
                            example: 1,
                            format: 'int64',
                            type: 'integer'
                        }
                    },
                    required: ['total', 'hash'],
                    type: 'object'
                }
            },
            required: ['hash', 'parts'],
            type: 'object'
        },
        txs: {
            items: {
                '$ref': '#/components/schemas/BlockTx'
            },
            nullable: true,
            type: 'array'
        }
    },
    required: ['id', 'header', 'begin_block_events', 'end_block_events', 'txs'],
    type: 'object'
} as const;

export const BlockTxSchema = {
    properties: {
        hash: {
            example: '223BF64D4A01074DC523A80E76B9BBC786C791FB0A1893AC5B14866356FCFD6C',
            type: 'string'
        },
        result: {
            properties: {
                code: {
                    example: 0,
                    format: 'int64',
                    type: 'integer'
                },
                codespace: {
                    example: 'ibc',
                    type: 'string'
                },
                data: {
                    example: '',
                    type: 'string'
                },
                events: {
                    items: {
                        additionalProperties: {
                            type: 'string'
                        },
                        type: 'object'
                    },
                    nullable: true,
                    type: 'array'
                },
                gas_used: {
                    example: '100',
                    type: 'string'
                },
                gas_wanted: {
                    example: '100',
                    type: 'string'
                },
                info: {
                    example: '',
                    type: 'string'
                },
                log: {
                    example: 'not enough gas',
                    type: 'string'
                }
            },
            type: 'object'
        },
        tx: {
            additionalProperties: true,
            type: 'object'
        }
    },
    required: ['hash', 'tx', 'result'],
    type: 'object'
} as const;

export const BorrowerSchema = {
    properties: {
        asset: {
            example: 'BTC.BTC',
            type: 'string'
        },
        collateral_current: {
            example: '123456',
            type: 'string'
        },
        collateral_deposited: {
            example: '123456',
            type: 'string'
        },
        collateral_withdrawn: {
            example: '123456',
            type: 'string'
        },
        debt_current: {
            example: '123456',
            type: 'string'
        },
        debt_issued: {
            example: '123456',
            type: 'string'
        },
        debt_repaid: {
            example: '123456',
            type: 'string'
        },
        last_open_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        last_repay_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        owner: {
            example: 'bc1qn9esxuw8ca7ts8l6w66kdh800s09msvutydc46',
            type: 'string'
        }
    },
    required: ['owner', 'asset', 'debt_issued', 'debt_repaid', 'debt_current', 'collateral_deposited', 'collateral_withdrawn', 'collateral_current', 'last_open_height', 'last_repay_height'],
    type: 'object'
} as const;

export const BorrowerResponseSchema = {
    '$ref': '#/components/schemas/Borrower'
} as const;

export const BorrowersResponseSchema = {
    items: {
        '$ref': '#/components/schemas/Borrower'
    },
    type: 'array'
} as const;

export const CoinSchema = {
    properties: {
        amount: {
            example: '100000',
            type: 'string'
        },
        asset: {
            example: 'BTC.BTC',
            type: 'string'
        },
        decimals: {
            example: 6,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['asset', 'amount'],
    type: 'object'
} as const;

export const ConstantsResponseSchema = {
    properties: {
        bool_values: {
            additionalProperties: {
                type: 'string'
            },
            example: {
                StrictBondLiquidityRatio: true
            },
            type: 'object'
        },
        int_64_values: {
            additionalProperties: {
                type: 'string'
            },
            example: {
                AsgardSize: 40
            },
            type: 'object'
        },
        string_values: {
            additionalProperties: {
                type: 'string'
            },
            example: {
                DefaultPoolStatus: 'Staged'
            },
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const DerivedPoolSchema = {
    properties: {
        asset: {
            example: 'BTC.BTC',
            type: 'string'
        },
        balance_asset: {
            example: '3197744873',
            type: 'string'
        },
        balance_rune: {
            example: '13460619152985',
            type: 'string'
        },
        decimals: {
            example: 6,
            format: 'int64',
            type: 'integer'
        },
        derived_depth_bps: {
            description: 'the depth of the derived virtual pool relative to L1 pool (in basis points)',
            example: '123456',
            type: 'string'
        },
        status: {
            example: 'Available',
            type: 'string'
        }
    },
    required: ['asset', 'status', 'balance_asset', 'balance_rune', 'derived_depth_bps'],
    type: 'object'
} as const;

export const DerivedPoolResponseSchema = {
    '$ref': '#/components/schemas/DerivedPool'
} as const;

export const DerivedPoolsResponseSchema = {
    items: {
        '$ref': '#/components/schemas/DerivedPool'
    },
    type: 'array'
} as const;

export const InboundAddressSchema = {
    properties: {
        address: {
            example: 'bc1qn9esxuw8ca7ts8l6w66kdh800s09msvutydc46',
            type: 'string'
        },
        chain: {
            example: 'BTC',
            type: 'string'
        },
        chain_lp_actions_paused: {
            description: 'Returns true if LP actions are paused for this chain',
            example: false,
            type: 'boolean'
        },
        chain_trading_paused: {
            description: 'Returns true if trading is paused for this chain',
            example: false,
            type: 'boolean'
        },
        dust_threshold: {
            description: 'Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.',
            example: '10000',
            type: 'string'
        },
        gas_rate: {
            description: 'The minimum fee rate used by vaults to send outbound TXs. The actual fee rate may be higher. For EVM chains this is returned in gwei (1e9).',
            example: '214',
            type: 'string'
        },
        gas_rate_units: {
            description: 'Units of the gas_rate.',
            example: 'satsperbyte',
            type: 'string'
        },
        global_trading_paused: {
            description: 'Returns true if trading is paused globally',
            example: false,
            type: 'boolean'
        },
        halted: {
            description: 'Returns true if trading is unavailable for this chain, either because trading is halted globally or specifically for this chain',
            example: false,
            type: 'boolean'
        },
        outbound_fee: {
            description: 'The total outbound fee charged to the user for outbound txs in the gas asset of the chain.',
            example: '428000',
            type: 'string'
        },
        outbound_tx_size: {
            description: 'Avg size of outbound TXs on each chain. For UTXO chains it may be larger than average, as it takes into account vault consolidation txs, which can have many vouts',
            example: '1000',
            type: 'string'
        },
        pub_key: {
            example: 'thorpub1addwnpepq2jqhv5rdqlkusfxy05stfzcgslhhz5qh8pxetw5ry2aa6awgdh3shq8s82',
            type: 'string'
        },
        router: {
            example: '0xD37BbE5744D730a1d98d8DC97c42F0Ca46aD7146',
            type: 'string'
        }
    },
    required: ['halted'],
    type: 'object'
} as const;

export const InboundAddressesResponseSchema = {
    items: {
        '$ref': '#/components/schemas/InboundAddress'
    },
    type: 'array'
} as const;

export const InvariantResponseSchema = {
    properties: {
        broken: {
            description: 'Returns true if the invariant is broken.',
            example: false,
            type: 'boolean'
        },
        invariant: {
            description: 'The name of the invariant.',
            example: 'asgard',
            type: 'string'
        },
        msg: {
            description: 'Informative message about the invariant result.',
            example: ['insolvent: 200000rune', 'oversolvent: 1btc/btc'],
            items: {
                type: 'string'
            },
            type: 'array'
        }
    },
    required: ['invariant', 'broken', 'msg'],
    type: 'object'
} as const;

export const InvariantsResponseSchema = {
    properties: {
        invariants: {
            items: {
                type: 'string'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const KeygenMetricSchema = {
    properties: {
        node_tss_times: {
            items: {
                properties: {
                    address: {
                        type: 'string'
                    },
                    tss_time: {
                        type: 'string'
                    }
                },
                title: 'NodeKeygenMetric',
                type: 'object'
            },
            type: 'array'
        },
        pub_key: {
            type: 'string'
        }
    },
    required: ['node_tss_times'],
    type: 'object'
} as const;

export const KeygenMetricsResponseSchema = {
    items: {
        '$ref': '#/components/schemas/KeygenMetric'
    },
    type: 'array'
} as const;

export const KeygenResponseSchema = {
    properties: {
        keygen_block: {
            properties: {
                height: {
                    description: 'the height of the keygen block',
                    format: 'int64',
                    type: 'integer'
                },
                keygens: {
                    items: {
                        properties: {
                            id: {
                                type: 'string'
                            },
                            members: {
                                items: {
                                    description: 'pubkeys of the keygen block member nodes',
                                    type: 'string'
                                },
                                type: 'array'
                            },
                            type: {
                                type: 'string'
                            }
                        },
                        title: 'keygen',
                        type: 'object'
                    },
                    type: 'array'
                }
            },
            required: ['keygens'],
            title: 'KeygenBlock',
            type: 'object'
        },
        signature: {
            type: 'string'
        }
    },
    required: ['keygen_block', 'signature'],
    type: 'object'
} as const;

export const KeysignResponseSchema = {
    properties: {
        keysign: {
            properties: {
                height: {
                    description: 'the block(s) in which a tx out item is scheduled to be signed and moved from the scheduled outbound queue to the outbound queue',
                    format: 'int64',
                    type: 'integer'
                },
                tx_array: {
                    items: {
                        '$ref': '#/components/schemas/TxOutItem'
                    },
                    type: 'array'
                }
            },
            required: ['tx_array'],
            title: 'KeysignInfo',
            type: 'object'
        },
        signature: {
            type: 'string'
        }
    },
    required: ['keysign', 'signature'],
    type: 'object'
} as const;

export const LastBlockSchema = {
    properties: {
        chain: {
            type: 'string'
        },
        last_observed_in: {
            format: 'int64',
            type: 'integer'
        },
        last_signed_out: {
            format: 'int64',
            type: 'integer'
        },
        thorchain: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['chain', 'last_observed_in', 'last_signed_out', 'thorchain'],
    type: 'object'
} as const;

export const LastBlockResponseSchema = {
    items: {
        '$ref': '#/components/schemas/LastBlock'
    },
    type: 'array'
} as const;

export const LiquidityProviderSchema = {
    properties: {
        asset: {
            example: 'BTC.BTC',
            type: 'string'
        },
        asset_address: {
            example: 'bc1qn9esxuw8ca7ts8l6w66kdh800s09msvutydc46',
            type: 'string'
        },
        asset_deposit_value: {
            example: '0',
            type: 'string'
        },
        asset_redeem_value: {
            example: '0',
            type: 'string'
        },
        last_add_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        last_withdraw_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        luvi_deposit_value: {
            example: '0',
            type: 'string'
        },
        luvi_growth_pct: {
            example: '0',
            type: 'string'
        },
        luvi_redeem_value: {
            example: '0',
            type: 'string'
        },
        pending_asset: {
            example: '242000000',
            type: 'string'
        },
        pending_rune: {
            example: '0',
            type: 'string'
        },
        pending_tx_id: {
            example: 'C4C876802xxxxxxxxxxBC408829878446A37011EBBA0C5CAA3DD64A548879CB228',
            type: 'string'
        },
        rune_address: {
            example: 'thor1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
            type: 'string'
        },
        rune_deposit_value: {
            example: '0',
            type: 'string'
        },
        rune_redeem_value: {
            example: '0',
            type: 'string'
        },
        units: {
            example: '0',
            type: 'string'
        }
    },
    required: ['asset', 'units', 'pending_rune', 'pending_asset', 'rune_deposit_value', 'asset_deposit_value'],
    type: 'object'
} as const;

export const LiquidityProviderResponseSchema = {
    '$ref': '#/components/schemas/LiquidityProvider'
} as const;

export const LiquidityProviderSummarySchema = {
    properties: {
        asset: {
            example: 'BTC.BTC',
            type: 'string'
        },
        asset_address: {
            example: 'bc1qn9esxuw8ca7ts8l6w66kdh800s09msvutydc46',
            type: 'string'
        },
        asset_deposit_value: {
            example: '0',
            type: 'string'
        },
        last_add_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        last_withdraw_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        pending_asset: {
            example: '242000000',
            type: 'string'
        },
        pending_rune: {
            example: '0',
            type: 'string'
        },
        pending_tx_id: {
            example: 'C4C876802xxxxxxxxxxBC408829878446A37011EBBA0C5CAA3DD64A548879CB228',
            type: 'string'
        },
        rune_address: {
            example: 'thor1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
            type: 'string'
        },
        rune_deposit_value: {
            example: '0',
            type: 'string'
        },
        units: {
            example: '0',
            type: 'string'
        }
    },
    required: ['asset', 'units', 'pending_rune', 'pending_asset', 'rune_deposit_value', 'asset_deposit_value'],
    type: 'object'
} as const;

export const LiquidityProvidersResponseSchema = {
    items: {
        '$ref': '#/components/schemas/LiquidityProviderSummary'
    },
    type: 'array'
} as const;

export const MetricsResponseSchema = {
    properties: {
        keygen: {
            '$ref': '#/components/schemas/KeygenMetricsResponse'
        },
        keysign: {
            properties: {
                node_tss_times: {
                    items: {
                        '$ref': '#/components/schemas/TssMetric'
                    },
                    type: 'array'
                },
                tx_id: {
                    type: 'string'
                }
            },
            title: 'KeysignMetrics',
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const MimirNodesResponseSchema = {
    properties: {
        mimirs: {
            items: {
                properties: {
                    key: {
                        type: 'string'
                    },
                    signer: {
                        type: 'string'
                    },
                    value: {
                        format: 'int64',
                        type: 'integer'
                    }
                },
                title: 'MimirVote',
                type: 'object'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const MimirResponseSchema = {
    additionalProperties: {
        type: 'string'
    },
    example: {
        NODEOPERATORFEE: 2000,
        NUMBEROFNEWNODESPERCHURN: 2
    },
    type: 'object'
} as const;

export const MsgSwapSchema = {
    properties: {
        affiliate_address: {
            description: 'the affiliate address which will receive any affiliate fee',
            example: 'thor1f3s7q037eancht7sg0aj995dht25rwrnu4ats5',
            type: 'string'
        },
        affiliate_basis_points: {
            description: 'the affiliate fee in basis points',
            type: 'string'
        },
        aggregator: {
            description: 'the contract address if an aggregator is specified for a non-THORChain SwapOut',
            type: 'string'
        },
        aggregator_target_address: {
            description: 'the desired output asset of the aggregator SwapOut',
            type: 'string'
        },
        aggregator_target_limit: {
            description: "the minimum amount of SwapOut asset to receive (else cancelling the SwapOut and receiving THORChain's output)",
            type: 'string'
        },
        destination: {
            description: 'the destination address to receive the swap output',
            example: '0x66fb1cd65b97fa40457b90b7d1ca6b92cb64b32b',
            type: 'string'
        },
        order_type: {
            description: 'market if immediately completed or refunded, limit if held until fulfillable',
            type: 'string'
        },
        signer: {
            description: 'the signer (sender) of the transaction',
            type: 'string'
        },
        stream_interval: {
            description: 'the interval (in blocks) to execute the streaming swap',
            format: 'int64',
            type: 'integer'
        },
        stream_quantity: {
            description: 'number of swaps to execute in a streaming swap',
            format: 'int64',
            type: 'integer'
        },
        target_asset: {
            description: 'the asset to be swapped to',
            example: 'ETH.ETH',
            type: 'string'
        },
        trade_target: {
            description: 'the minimum amount of output asset to receive (else cancelling and refunding the swap)',
            type: 'string'
        },
        tx: {
            '$ref': '#/components/schemas/Tx'
        }
    },
    required: ['tx', 'target_asset', 'trade_target', 'affiliate_basis_points'],
    type: 'object'
} as const;

export const NetworkResponseSchema = {
    properties: {
        bond_reward_rune: {
            description: 'total amount of RUNE awarded to node operators',
            example: '857134475040',
            type: 'string'
        },
        effective_security_bond: {
            description: 'effective security bond used to determine maximum pooled RUNE',
            example: '0',
            type: 'string'
        },
        gas_spent_rune: {
            description: 'Sum of the gas the network has spent to send outbounds',
            example: '1000000000',
            type: 'string'
        },
        gas_withheld_rune: {
            description: 'Sum of the gas withheld from users to cover outbound gas',
            example: '1500000000',
            type: 'string'
        },
        native_outbound_fee_rune: {
            description: 'the outbound transaction fee in rune, converted from the NativeOutboundFeeUSD mimir (after USD fees are enabled)',
            example: '100000000',
            type: 'string'
        },
        native_tx_fee_rune: {
            description: 'the native transaction fee in rune, converted from the NativeTransactionFeeUSD mimir (after USD fees are enabled)',
            example: '100000000',
            type: 'string'
        },
        outbound_fee_multiplier: {
            description: 'Current outbound fee multiplier, in basis points',
            example: '15000',
            type: 'string'
        },
        rune_price_in_tor: {
            description: 'the rune price in tor',
            example: '10',
            type: 'string'
        },
        tns_fee_per_block_rune: {
            description: 'the thorname fee per block in rune, converted from the TNSFeePerBlockUSD mimir (after USD fees are enabled)',
            example: '20',
            type: 'string'
        },
        tns_register_fee_rune: {
            description: 'the thorname register fee in rune, converted from the TNSRegisterFeeUSD mimir (after USD fees are enabled)',
            example: '1000000000',
            type: 'string'
        },
        tor_price_in_rune: {
            description: 'the tor price in rune',
            example: '10',
            type: 'string'
        },
        total_bond_units: {
            description: 'total bonded RUNE',
            example: '0',
            type: 'string'
        },
        total_reserve: {
            description: 'total reserve RUNE',
            example: '21999180112172346',
            type: 'string'
        },
        vaults_migrating: {
            description: 'Returns true if there exist RetiringVaults which have not finished migrating funds to new ActiveVaults',
            example: false,
            type: 'boolean'
        }
    },
    required: ['bond_reward_rune', 'total_bond_units', 'effective_security_bond', 'total_reserve', 'vaults_migrating', 'gas_spent_rune', 'gas_withheld_rune', 'native_outbound_fee_rune', 'native_tx_fee_rune', 'tns_register_fee_rune', 'tns_fee_per_block_rune', 'rune_price_in_tor', 'tor_price_in_rune'],
    type: 'object'
} as const;

export const NodeSchema = {
    properties: {
        active_block_height: {
            description: 'the block height at which the node became active',
            example: 123456,
            format: 'int64',
            type: 'integer'
        },
        bond_providers: {
            properties: {
                node_operator_fee: {
                    description: 'node operator fee in basis points',
                    type: 'string'
                },
                providers: {
                    description: 'all the bond providers for the node',
                    items: {
                        properties: {
                            bond: {
                                type: 'string'
                            },
                            bond_address: {
                                type: 'string'
                            }
                        },
                        title: 'NodeBondProvider',
                        type: 'object'
                    },
                    type: 'array'
                }
            },
            required: ['node_operator_fee', 'providers'],
            title: 'NodeBondProviders',
            type: 'object'
        },
        current_award: {
            example: '123456',
            type: 'string'
        },
        forced_to_leave: {
            description: 'indicates whether the node has been forced to leave by the network, typically via ban',
            type: 'boolean'
        },
        ip_address: {
            example: '10.20.30.40',
            type: 'string'
        },
        jail: {
            properties: {
                reason: {
                    type: 'string'
                },
                release_height: {
                    example: 1234,
                    format: 'int64',
                    type: 'integer'
                }
            },
            title: 'NodeJail',
            type: 'object'
        },
        leave_height: {
            example: 0,
            format: 'int64',
            type: 'integer'
        },
        node_address: {
            example: 'thor1f3s7q037eancht7sg0aj995dht25rwrnu4ats5',
            type: 'string'
        },
        node_operator_address: {
            example: 'thor1f3s7q037eancht7sg0aj995dht25rwrnu4ats5',
            type: 'string'
        },
        observe_chains: {
            description: 'the last observed heights for all chain by the node',
            items: {
                properties: {
                    chain: {
                        example: 'BTC',
                        type: 'string'
                    },
                    height: {
                        example: 2000000,
                        format: 'int64',
                        type: 'integer'
                    }
                },
                required: ['chain', 'height'],
                title: 'ChainHeight',
                type: 'object'
            },
            type: 'array'
        },
        peer_id: {
            description: 'the P2PID (:6040/p2pid endpoint) of the node',
            example: '16Uiu2HAmRgsiryer3pWCPJz18PQZDFFs1GBqCPGGJczrQXdoTBMk',
            type: 'string'
        },
        preflight_status: {
            properties: {
                code: {
                    example: 0,
                    format: 'int64',
                    type: 'integer'
                },
                reason: {
                    description: 'the reason for the transition to the next status',
                    example: 'OK',
                    type: 'string'
                },
                status: {
                    description: 'the next status of the node',
                    example: 'Ready',
                    type: 'string'
                }
            },
            required: ['status', 'reason', 'code'],
            title: 'NodePreflightStatus',
            type: 'object'
        },
        pub_key_set: {
            properties: {
                ed25519: {
                    example: 'thorpub1addwnpepq27ck6u44zl8qqdnmzjjc8rg72amrxrsp42p9vd7kt6marhy6ww76z8shwe',
                    type: 'string'
                },
                secp256k1: {
                    example: 'thorpub1addwnpepq27ck6u44zl8qqdnmzjjc8rg72amrxrsp42p9vd7kt6marhy6ww76z8shwe',
                    type: 'string'
                }
            },
            title: 'NodePubKeySet',
            type: 'object'
        },
        requested_to_leave: {
            type: 'boolean'
        },
        signer_membership: {
            description: 'the set of vault public keys of which the node is a member',
            items: {
                example: 'thorpub1addwnpepq2jqhv5rdqlkusfxy05stfzcgslhhz5qh8pxetw5ry2aa6awgdh3shq8s82',
                type: 'string'
            },
            type: 'array'
        },
        slash_points: {
            description: 'the accumulated slash points, reset at churn but excessive slash points may carry over',
            example: 42,
            format: 'int64',
            type: 'integer'
        },
        status: {
            enum: ['Active', 'Whitelisted', 'Standby', 'Disabled'],
            example: 'Active',
            type: 'string'
        },
        status_since: {
            description: 'the block height of the current provided information for the node',
            example: 100000,
            format: 'int64',
            type: 'integer'
        },
        total_bond: {
            description: 'current node bond',
            example: '123456789',
            type: 'string'
        },
        validator_cons_pub_key: {
            description: 'the consensus pub key for the node',
            example: 'thor104gsqwta048e80j909g6y9kkqdjrw0lff866ew',
            type: 'string'
        },
        version: {
            description: 'the currently set version of the node',
            example: '0.35.0',
            type: 'string'
        }
    },
    required: ['node_address', 'status', 'pub_key_set', 'validator_cons_pub_key', 'peer_id', 'active_block_height', 'status_since', 'node_operator_address', 'total_bond', 'bond_providers', 'signer_membership', 'requested_to_leave', 'forced_to_leave', 'leave_height', 'ip_address', 'version', 'slash_points', 'jail', 'current_award', 'observe_chains', 'preflight_status'],
    type: 'object'
} as const;

export const NodeResponseSchema = {
    '$ref': '#/components/schemas/Node'
} as const;

export const NodesResponseSchema = {
    items: {
        '$ref': '#/components/schemas/Node'
    },
    type: 'array'
} as const;

export const ObservedTxSchema = {
    properties: {
        aggregator: {
            description: 'the outbound aggregator to use, will also match a suffix',
            example: '0x69800327b38A4CeF30367Dec3f64c2f2386f3848',
            type: 'string'
        },
        aggregator_target: {
            description: 'the aggregator target asset provided to transferOutAndCall',
            example: '0x0a44986b70527154e9F4290eC14e5f0D1C861822',
            type: 'string'
        },
        aggregator_target_limit: {
            description: 'the aggregator target asset limit provided to transferOutAndCall',
            example: '0x0a44986b70527154e9F4290eC14e5f0D1C861822',
            type: 'string'
        },
        external_confirmation_delay_height: {
            description: 'the block height on the external source chain when confirmation counting will be complete, not provided if chain is THOR',
            example: 7581334,
            format: 'int64',
            type: 'integer'
        },
        external_observed_height: {
            description: 'the block height on the external source chain when the transaction was observed, not provided if chain is THOR',
            example: 7581334,
            format: 'int64',
            type: 'integer'
        },
        keysign_ms: {
            example: 10000,
            format: 'int64',
            type: 'integer'
        },
        observed_pub_key: {
            example: 'thorpub1addwnpepq27ck6u44zl8qqdnmzjjc8rg72amrxrsp42p9vd7kt6marhy6ww76z8shwe',
            type: 'string'
        },
        out_hashes: {
            items: {
                example: 'E17A0906E015F0C343691C18E475C8CB5F3F6C63F5BCDE0F3A341909763CC92B',
                type: 'string'
            },
            type: 'array'
        },
        signers: {
            items: {
                example: 'thor1f3s7q037eancht7sg0aj995dht25rwrnu4ats5',
                type: 'string'
            },
            type: 'array'
        },
        status: {
            enum: ['done', 'incomplete'],
            example: 'done',
            type: 'string'
        },
        tx: {
            '$ref': '#/components/schemas/Tx'
        }
    },
    required: ['tx'],
    type: 'object'
} as const;

export const OutboundFeeSchema = {
    properties: {
        asset: {
            description: 'the asset to display the outbound fee for',
            example: 'ETH.ETH',
            type: 'string'
        },
        dynamic_multiplier_basis_points: {
            description: 'dynamic multiplier basis points, based on the surplus_rune, affecting the size of the outbound_fee',
            example: '15000',
            type: 'string'
        },
        fee_spent_rune: {
            description: "Total RUNE the network has spent to reimburse gas costs for this asset's outbounds",
            example: '20000000000000',
            type: 'string'
        },
        fee_withheld_rune: {
            description: "Total RUNE the network has withheld as fees to later cover gas costs for this asset's outbounds",
            example: '30000000000000',
            type: 'string'
        },
        outbound_fee: {
            description: "the asset's outbound fee, in (1e8-format) units of the asset",
            example: '300000',
            type: 'string'
        },
        surplus_rune: {
            description: 'amount of RUNE by which the fee_withheld_rune exceeds the fee_spent_rune',
            example: '10000000000000',
            type: 'string'
        }
    },
    required: ['asset', 'outbound_fee'],
    type: 'object'
} as const;

export const OutboundFeesResponseSchema = {
    items: {
        '$ref': '#/components/schemas/OutboundFee'
    },
    type: 'array'
} as const;

export const OutboundResponseSchema = {
    items: {
        '$ref': '#/components/schemas/TxOutItem'
    },
    type: 'array'
} as const;

export const POLSchema = {
    properties: {
        current_deposit: {
            description: 'current amount of rune deposited',
            example: '21999180112172346',
            type: 'string'
        },
        pnl: {
            description: 'profit and loss of protocol owned liquidity',
            example: '21999180112172346',
            type: 'string'
        },
        rune_deposited: {
            description: 'total amount of RUNE deposited into the pools',
            example: '857134475040',
            type: 'string'
        },
        rune_withdrawn: {
            description: 'total amount of RUNE withdrawn from the pools',
            example: '0',
            type: 'string'
        },
        value: {
            description: "total value of protocol's LP position in RUNE value",
            example: '21999180112172346',
            type: 'string'
        }
    },
    required: ['rune_deposited', 'rune_withdrawn', 'value', 'pnl', 'current_deposit'],
    type: 'object'
} as const;

export const PoolSchema = {
    properties: {
        LP_units: {
            description: 'the total pool liquidity provider units',
            example: '14694928607473',
            type: 'string'
        },
        asset: {
            example: 'BTC.BTC',
            type: 'string'
        },
        asset_tor_price: {
            description: 'the USD (TOR) price of the asset in 1e8',
            example: '123456',
            type: 'string'
        },
        balance_asset: {
            example: '3197744873',
            type: 'string'
        },
        balance_rune: {
            example: '13460619152985',
            type: 'string'
        },
        decimals: {
            example: 6,
            format: 'int64',
            type: 'integer'
        },
        derived_depth_bps: {
            description: 'the depth of the derived virtual pool relative to L1 pool (in basis points)',
            example: '123456',
            type: 'string'
        },
        loan_collateral: {
            description: 'the amount of collateral collects for loans',
            example: '123456',
            type: 'string'
        },
        loan_collateral_remaining: {
            description: 'the amount of remaining collateral collects for loans',
            example: '123456',
            type: 'string'
        },
        loan_cr: {
            description: 'the current loan collateralization ratio',
            example: '123456',
            type: 'string'
        },
        pending_inbound_asset: {
            example: '101713319',
            type: 'string'
        },
        pending_inbound_rune: {
            example: '464993836',
            type: 'string'
        },
        pool_units: {
            description: 'the total pool units, this is the sum of LP and synth units',
            example: '14694928607473',
            type: 'string'
        },
        savers_capacity_remaining: {
            description: 'amount of remaining capacity in asset',
            example: '1000',
            type: 'string'
        },
        savers_depth: {
            description: 'the balance of L1 asset deposited into the Savers Vault',
            example: '199998',
            type: 'string'
        },
        savers_fill_bps: {
            description: 'the filled savers capacity in basis points, 4500/10000 = 45%',
            example: '4500',
            type: 'string'
        },
        savers_units: {
            description: 'the number of units owned by Savers',
            example: '199998',
            type: 'string'
        },
        short_code: {
            example: 'b',
            type: 'string'
        },
        status: {
            example: 'Available',
            type: 'string'
        },
        synth_mint_paused: {
            description: 'whether additional synths cannot be minted',
            example: true,
            type: 'boolean'
        },
        synth_supply: {
            description: 'the total supply of synths for the asset',
            example: '0',
            type: 'string'
        },
        synth_supply_remaining: {
            description: 'the amount of synth supply remaining before the current max supply is reached',
            example: '123456',
            type: 'string'
        },
        synth_units: {
            description: 'the total synth units in the pool',
            example: '0',
            type: 'string'
        }
    },
    required: ['asset', 'status', 'pending_inbound_asset', 'pending_inbound_rune', 'balance_asset', 'balance_rune', 'asset_tor_price', 'pool_units', 'LP_units', 'synth_units', 'synth_supply', 'savers_depth', 'savers_units', 'savers_fill_bps', 'savers_capacity_remaining', 'synth_mint_paused', 'synth_supply_remaining', 'loan_collateral', 'loan_collateral_remaining', 'loan_cr', 'derived_depth_bps'],
    type: 'object'
} as const;

export const PoolResponseSchema = {
    '$ref': '#/components/schemas/Pool'
} as const;

export const PoolSlipResponseSchema = {
    items: {
        properties: {
            asset: {
                example: 'BTC.BTC',
                type: 'string'
            },
            long_rollup: {
                description: 'Median of rollup snapshots over a long period',
                example: 1500,
                format: 'int64',
                type: 'integer'
            },
            pool_slip: {
                description: "Pool slip for this asset's pool for the current height",
                example: 5,
                format: 'int64',
                type: 'integer'
            },
            rollup: {
                description: 'Stored sum of pool slips over a number of previous block heights',
                example: 1500,
                format: 'int64',
                type: 'integer'
            },
            rollup_count: {
                description: 'Number of stored pool slips contributing to the current stored rollup',
                example: 300,
                format: 'int64',
                type: 'integer'
            },
            summed_rollup: {
                description: 'Summed pool slips over a number of previous block heights, to checksum the stored rollup',
                example: 1500,
                format: 'int64',
                type: 'integer'
            }
        },
        required: ['asset', 'pool_slip', 'rollup_count', 'long_rollup', 'rollup'],
        type: 'object'
    },
    title: 'PoolSlipResponse',
    type: 'array'
} as const;

export const PoolsResponseSchema = {
    items: {
        '$ref': '#/components/schemas/Pool'
    },
    type: 'array'
} as const;

export const QueueResponseSchema = {
    properties: {
        internal: {
            example: 0,
            format: 'int64',
            type: 'integer'
        },
        outbound: {
            description: 'number of signed outbound tx in the queue',
            example: 10,
            format: 'int64',
            type: 'integer'
        },
        scheduled_outbound_clout: {
            description: 'scheduled outbound clout in RUNE',
            type: 'string'
        },
        scheduled_outbound_value: {
            description: 'scheduled outbound value in RUNE',
            type: 'string'
        },
        swap: {
            example: 0,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['swap', 'outbound', 'internal', 'scheduled_outbound_value', 'scheduled_outbound_clout'],
    type: 'object'
} as const;

export const QuoteFeesSchema = {
    properties: {
        affiliate: {
            description: 'affiliate fee in the target asset',
            example: '1234',
            type: 'string'
        },
        asset: {
            description: 'the target asset used for all fees',
            example: 'ETH.ETH',
            type: 'string'
        },
        liquidity: {
            description: 'liquidity fees paid to pools in the target asset',
            example: '1234',
            type: 'string'
        },
        outbound: {
            description: 'outbound fee in the target asset',
            example: '1234',
            type: 'string'
        },
        slippage_bps: {
            description: 'the swap slippage in basis points',
            format: 'int64',
            type: 'integer'
        },
        total: {
            description: 'total fees in the target asset',
            example: '9876',
            type: 'string'
        },
        total_bps: {
            description: 'total basis points in fees relative to amount out',
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['asset', 'liquidity', 'total', 'slippage_bps', 'total_bps'],
    type: 'object'
} as const;

export const QuoteLoanCloseResponseSchema = {
    properties: {
        dust_threshold: {
            description: 'Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.',
            example: '10000',
            type: 'string'
        },
        expected_amount_in: {
            description: "The quantity of the repayment asset to be sent by the user, calculated as the desired percentage of the loan's value, expressed in units of 1e8",
            example: '10000',
            type: 'string'
        },
        expected_amount_out: {
            description: 'the amount of collateral asset the user can expect to receive after fees in 1e8 decimals',
            example: '10000',
            type: 'string'
        },
        expected_collateral_withdrawn: {
            description: 'the expected amount of collateral decrease on the loan',
            example: '1000000',
            type: 'string'
        },
        expected_debt_repaid: {
            description: 'the expected amount of TOR debt decrease on the loan',
            example: '1000000',
            type: 'string'
        },
        expiry: {
            description: 'expiration timestamp in unix seconds',
            example: 1671660285,
            format: 'int64',
            type: 'integer'
        },
        fees: {
            '$ref': '#/components/schemas/QuoteFees'
        },
        gas_rate_units: {
            description: 'the units of the recommended gas rate',
            example: 'gwei',
            type: 'string'
        },
        inbound_address: {
            description: 'the inbound address for the transaction on the source chain',
            example: 'bc1qjk3xzu5slu7mtmc8jc9yed3zqvkhkttm700g9a',
            type: 'string'
        },
        inbound_confirmation_blocks: {
            description: 'the approximate number of source chain blocks required before processing',
            format: 'int64',
            type: 'integer'
        },
        inbound_confirmation_seconds: {
            description: 'the approximate seconds for block confirmations required before processing',
            format: 'int64',
            type: 'integer'
        },
        memo: {
            description: 'generated memo for the loan close',
            example: '$-:ETH.ETH:0x1c7b17362c84287bd1184447e6dfeaf920c31bbe',
            type: 'string'
        },
        notes: {
            description: 'chain specific quote notes',
            example: 'Transfer the inbound_address the asset with the memo. Do not use multi-in, multi-out transactions.',
            type: 'string'
        },
        outbound_delay_blocks: {
            description: 'the number of thorchain blocks the outbound will be delayed',
            format: 'int64',
            type: 'integer'
        },
        outbound_delay_seconds: {
            description: 'the approximate seconds for the outbound delay before it will be sent',
            format: 'int64',
            type: 'integer'
        },
        recommended_gas_rate: {
            description: 'the recommended gas rate to use for the inbound to ensure timely confirmation',
            example: '10',
            type: 'string'
        },
        recommended_min_amount_in: {
            description: 'The recommended minimum inbound amount for this transaction type & inbound asset. Sending less than this amount could result in failed refunds.',
            example: '15000',
            type: 'string'
        },
        router: {
            description: 'the EVM chain router contract address',
            example: '0x3624525075b88B24ecc29CE226b0CEc1fFcB6976',
            type: 'string'
        },
        streaming_swap_blocks: {
            description: 'The number of blocks involved in the streaming swaps during the repayment process.',
            example: 10,
            format: 'int64',
            type: 'integer'
        },
        streaming_swap_seconds: {
            description: 'The approximate number of seconds taken by the streaming swaps involved in the repayment process.',
            example: 600,
            format: 'int64',
            type: 'integer'
        },
        total_repay_seconds: {
            description: 'The total expected duration for a repayment, measured in seconds, which includes the time for inbound confirmation, the duration of streaming swaps, and any outbound delays.',
            example: 600,
            format: 'int64',
            type: 'integer'
        },
        warning: {
            description: 'static warning message',
            example: 'Do not cache this response. Do not send funds after the expiry.',
            type: 'string'
        }
    },
    required: ['expected_amount_out', 'expected_collateral_withdrawn', 'expected_debt_repaid', 'expected_amount_in', 'memo', 'outbound_delay_blocks', 'outbound_delay_seconds', 'fees', 'warning', 'notes', 'expiry', 'streaming_swap_blocks', 'streaming_swap_seconds', 'total_repay_seconds'],
    type: 'object'
} as const;

export const QuoteLoanOpenResponseSchema = {
    properties: {
        dust_threshold: {
            description: 'Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.',
            example: '10000',
            type: 'string'
        },
        expected_amount_out: {
            description: 'the amount of the target asset the user can expect to receive after fees in 1e8 decimals',
            example: '10000',
            type: 'string'
        },
        expected_collateral_deposited: {
            description: 'the expected amount of collateral increase on the loan',
            example: '1000000',
            type: 'string'
        },
        expected_collateralization_ratio: {
            description: 'the expected collateralization ratio in basis points',
            example: '30000',
            type: 'string'
        },
        expected_debt_issued: {
            description: 'the expected amount of TOR debt increase on the loan',
            example: '1000000',
            type: 'string'
        },
        expiry: {
            description: 'expiration timestamp in unix seconds',
            example: 1671660285,
            format: 'int64',
            type: 'integer'
        },
        fees: {
            '$ref': '#/components/schemas/QuoteFees'
        },
        gas_rate_units: {
            description: 'the units of the recommended gas rate',
            example: 'gwei',
            type: 'string'
        },
        inbound_address: {
            description: 'the inbound address for the transaction on the source chain',
            example: 'bc1qjk3xzu5slu7mtmc8jc9yed3zqvkhkttm700g9a',
            type: 'string'
        },
        inbound_confirmation_blocks: {
            description: 'the approximate number of source chain blocks required before processing',
            format: 'int64',
            type: 'integer'
        },
        inbound_confirmation_seconds: {
            description: 'the approximate seconds for block confirmations required before processing',
            format: 'int64',
            type: 'integer'
        },
        memo: {
            description: 'generated memo for the loan open',
            example: '$+:ETH.ETH:0x1c7b17362c84287bd1184447e6dfeaf920c31bbe',
            type: 'string'
        },
        notes: {
            description: 'chain specific quote notes',
            example: 'Transfer the inbound_address the asset with the memo. Do not use multi-in, multi-out transactions.',
            type: 'string'
        },
        outbound_delay_blocks: {
            description: 'the number of thorchain blocks the outbound will be delayed',
            format: 'int64',
            type: 'integer'
        },
        outbound_delay_seconds: {
            description: 'the approximate seconds for the outbound delay before it will be sent',
            format: 'int64',
            type: 'integer'
        },
        recommended_gas_rate: {
            description: 'the recommended gas rate to use for the inbound to ensure timely confirmation',
            example: '10',
            type: 'string'
        },
        recommended_min_amount_in: {
            description: 'The recommended minimum inbound amount for this transaction type & inbound asset. Sending less than this amount could result in failed refunds.',
            example: '15000',
            type: 'string'
        },
        router: {
            description: 'the EVM chain router contract address',
            example: '0x3624525075b88B24ecc29CE226b0CEc1fFcB6976',
            type: 'string'
        },
        streaming_swap_blocks: {
            description: 'The number of blocks involved in the streaming swaps during the open loan process.',
            example: 10,
            format: 'int64',
            type: 'integer'
        },
        streaming_swap_seconds: {
            description: 'The approximate number of seconds taken by the streaming swaps involved in the open loan process.',
            example: 600,
            format: 'int64',
            type: 'integer'
        },
        total_open_loan_seconds: {
            description: 'The total expected duration for a open loan, measured in seconds, which includes the time for inbound confirmation, the duration of streaming swaps, and any outbound delays.',
            example: 600,
            format: 'int64',
            type: 'integer'
        },
        warning: {
            description: 'static warning message',
            example: 'Do not cache this response. Do not send funds after the expiry.',
            type: 'string'
        }
    },
    required: ['expected_amount_out', 'expected_collateralization_ratio', 'expected_collateral_deposited', 'expected_debt_issued', 'outbound_delay_blocks', 'outbound_delay_seconds', 'fees', 'warning', 'notes', 'expiry', 'streaming_swap_blocks', 'streaming_swap_seconds', 'total_open_loan_seconds', 'recommended_gas_rate', 'gas_rate_units'],
    type: 'object'
} as const;

export const QuoteSaverDepositResponseSchema = {
    properties: {
        dust_threshold: {
            description: 'Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.',
            example: '10000',
            type: 'string'
        },
        expected_amount_deposit: {
            description: 'the amount of the target asset the user can expect to deposit after fees',
            example: '10000',
            type: 'string'
        },
        expected_amount_out: {
            description: 'same as expected_amount_deposit, to be deprecated in favour of expected_amount_deposit',
            example: '10000',
            type: 'string'
        },
        expiry: {
            description: 'expiration timestamp in unix seconds',
            example: 1671660285,
            format: 'int64',
            type: 'integer'
        },
        fees: {
            '$ref': '#/components/schemas/QuoteFees'
        },
        gas_rate_units: {
            description: 'the units of the recommended gas rate',
            example: 'gwei',
            type: 'string'
        },
        inbound_address: {
            description: 'the inbound address for the transaction on the source chain',
            example: 'bc1qjk3xzu5slu7mtmc8jc9yed3zqvkhkttm700g9a',
            type: 'string'
        },
        inbound_confirmation_blocks: {
            description: 'the approximate number of source chain blocks required before processing',
            format: 'int64',
            type: 'integer'
        },
        inbound_confirmation_seconds: {
            description: 'the approximate seconds for block confirmations required before processing',
            format: 'int64',
            type: 'integer'
        },
        memo: {
            description: 'generated memo for the deposit',
            example: '+:ETH/ETH::thor17gw75axcnr8747pkanye45pnrwk7p9c3cqncsv:100',
            type: 'string'
        },
        notes: {
            description: 'chain specific quote notes',
            example: 'Transfer the inbound_address the asset with the memo. Do not use multi-in, multi-out transactions.',
            type: 'string'
        },
        outbound_delay_blocks: {
            description: 'the number of thorchain blocks the outbound will be delayed',
            format: 'int64',
            type: 'integer'
        },
        outbound_delay_seconds: {
            description: 'the approximate seconds for the outbound delay before it will be sent',
            format: 'int64',
            type: 'integer'
        },
        recommended_gas_rate: {
            description: 'the recommended gas rate to use for the inbound to ensure timely confirmation',
            example: '10',
            type: 'string'
        },
        recommended_min_amount_in: {
            description: 'The recommended minimum inbound amount for this transaction type & inbound asset. Sending less than this amount could result in failed refunds.',
            example: '15000',
            type: 'string'
        },
        router: {
            description: 'the EVM chain router contract address',
            example: '0x3624525075b88B24ecc29CE226b0CEc1fFcB6976',
            type: 'string'
        },
        warning: {
            description: 'static warning message',
            example: 'Do not cache this response. Do not send funds after the expiry.',
            type: 'string'
        }
    },
    required: ['memo', 'inbound_address', 'expected_amount_deposit', 'fees', 'slippage_bps', 'warning', 'notes', 'expiry', 'recommended_gas_rate', 'gas_rate_units'],
    type: 'object'
} as const;

export const QuoteSaverWithdrawResponseSchema = {
    properties: {
        dust_amount: {
            description: 'the dust amount of the target asset the user should send to initialize the withdraw, the client can send this OR provide the memo',
            example: '10000',
            type: 'string'
        },
        dust_threshold: {
            description: 'Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.',
            example: '10000',
            type: 'string'
        },
        expected_amount_out: {
            description: 'the amount of the target asset the user can expect to withdraw after fees in 1e8 decimals',
            example: '10000',
            type: 'string'
        },
        expiry: {
            description: 'expiration timestamp in unix seconds',
            example: 1671660285,
            format: 'int64',
            type: 'integer'
        },
        fees: {
            '$ref': '#/components/schemas/QuoteFees'
        },
        gas_rate_units: {
            description: 'the units of the recommended gas rate',
            example: 'gwei',
            type: 'string'
        },
        inbound_address: {
            description: 'the inbound address for the transaction on the source chain',
            example: 'bc1qjk3xzu5slu7mtmc8jc9yed3zqvkhkttm700g9a',
            type: 'string'
        },
        inbound_confirmation_blocks: {
            description: 'the approximate number of source chain blocks required before processing',
            format: 'int64',
            type: 'integer'
        },
        inbound_confirmation_seconds: {
            description: 'the approximate seconds for block confirmations required before processing',
            format: 'int64',
            type: 'integer'
        },
        memo: {
            description: 'generated memo for the withdraw, the client can use this OR send the dust amount',
            example: '-:ETH.ETH:0x1c7b17362c84287bd1184447e6dfeaf920c31bbe:1440450000:thor17gw75axcnr8747pkanye45pnrwk7p9c3cqncsv:100',
            type: 'string'
        },
        notes: {
            description: 'chain specific quote notes',
            example: 'Transfer the inbound_address the asset with the memo. Do not use multi-in, multi-out transactions.',
            type: 'string'
        },
        outbound_delay_blocks: {
            description: 'the number of thorchain blocks the outbound will be delayed',
            format: 'int64',
            type: 'integer'
        },
        outbound_delay_seconds: {
            description: 'the approximate seconds for the outbound delay before it will be sent',
            format: 'int64',
            type: 'integer'
        },
        recommended_gas_rate: {
            description: 'the recommended gas rate to use for the inbound to ensure timely confirmation',
            example: '10',
            type: 'string'
        },
        recommended_min_amount_in: {
            description: 'The recommended minimum inbound amount for this transaction type & inbound asset. Sending less than this amount could result in failed refunds.',
            example: '15000',
            type: 'string'
        },
        router: {
            description: 'the EVM chain router contract address',
            example: '0x3624525075b88B24ecc29CE226b0CEc1fFcB6976',
            type: 'string'
        },
        warning: {
            description: 'static warning message',
            example: 'Do not cache this response. Do not send funds after the expiry.',
            type: 'string'
        }
    },
    required: ['inbound_address', 'expected_amount_out', 'dust_amount', 'memo', 'outbound_delay_blocks', 'outbound_delay_seconds', 'fees', 'slippage_bps', 'warning', 'notes', 'expiry', 'recommended_gas_rate', 'gas_rate_units'],
    type: 'object'
} as const;

export const QuoteSwapResponseSchema = {
    properties: {
        dust_threshold: {
            description: 'Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.',
            example: '10000',
            type: 'string'
        },
        expected_amount_out: {
            description: 'the amount of the target asset the user can expect to receive after fees',
            example: '10000',
            type: 'string'
        },
        expiry: {
            description: 'expiration timestamp in unix seconds',
            example: 1671660285,
            format: 'int64',
            type: 'integer'
        },
        fees: {
            '$ref': '#/components/schemas/QuoteFees'
        },
        gas_rate_units: {
            description: 'the units of the recommended gas rate',
            example: 'gwei',
            type: 'string'
        },
        inbound_address: {
            description: 'the inbound address for the transaction on the source chain',
            example: 'bc1qjk3xzu5slu7mtmc8jc9yed3zqvkhkttm700g9a',
            type: 'string'
        },
        inbound_confirmation_blocks: {
            description: 'the approximate number of source chain blocks required before processing',
            format: 'int64',
            type: 'integer'
        },
        inbound_confirmation_seconds: {
            description: 'the approximate seconds for block confirmations required before processing',
            format: 'int64',
            type: 'integer'
        },
        max_streaming_quantity: {
            description: 'the maximum amount of trades a streaming swap can do for a trade',
            example: 10,
            format: 'int64',
            type: 'integer'
        },
        memo: {
            description: 'generated memo for the swap',
            example: '=:ETH.ETH:0x1c7b17362c84287bd1184447e6dfeaf920c31bbe:1440450000:thor17gw75axcnr8747pkanye45pnrwk7p9c3cqncsv:100',
            type: 'string'
        },
        notes: {
            description: 'chain specific quote notes',
            example: 'Transfer the inbound_address the asset with the memo. Do not use multi-in, multi-out transactions.',
            type: 'string'
        },
        outbound_delay_blocks: {
            description: 'the number of thorchain blocks the outbound will be delayed',
            format: 'int64',
            type: 'integer'
        },
        outbound_delay_seconds: {
            description: 'the approximate seconds for the outbound delay before it will be sent',
            format: 'int64',
            type: 'integer'
        },
        recommended_gas_rate: {
            description: 'the recommended gas rate to use for the inbound to ensure timely confirmation',
            example: '10',
            type: 'string'
        },
        recommended_min_amount_in: {
            description: 'The recommended minimum inbound amount for this transaction type & inbound asset. Sending less than this amount could result in failed refunds.',
            example: '15000',
            type: 'string'
        },
        router: {
            description: 'the EVM chain router contract address',
            example: '0x3624525075b88B24ecc29CE226b0CEc1fFcB6976',
            type: 'string'
        },
        streaming_swap_blocks: {
            description: 'the number of blocks the streaming swap will execute over',
            example: 100,
            format: 'int64',
            type: 'integer'
        },
        streaming_swap_seconds: {
            description: 'approx the number of seconds the streaming swap will execute over',
            example: 600,
            format: 'int64',
            type: 'integer'
        },
        total_swap_seconds: {
            description: 'total number of seconds a swap is expected to take (inbound conf + streaming swap + outbound delay)',
            example: 600,
            format: 'int64',
            type: 'integer'
        },
        warning: {
            description: 'static warning message',
            example: 'Do not cache this response. Do not send funds after the expiry.',
            type: 'string'
        }
    },
    required: ['expected_amount_out', 'outbound_delay_blocks', 'outbound_delay_seconds', 'fees', 'warning', 'notes', 'expiry'],
    type: 'object'
} as const;

export const RUNEPoolResponseSchema = {
    properties: {
        pol: {
            '$ref': '#/components/schemas/POL'
        },
        providers: {
            properties: {
                current_deposit: {
                    description: 'the current RUNE deposited by providers',
                    example: '123456',
                    type: 'string'
                },
                pending_rune: {
                    description: 'the amount of RUNE pending',
                    example: '123456',
                    type: 'string'
                },
                pending_units: {
                    description: 'the units of RUNEPool owned by providers that remain pending',
                    example: '123456',
                    type: 'string'
                },
                pnl: {
                    description: 'the profit and loss of the provider share of the RUNEPool',
                    example: '123456',
                    type: 'string'
                },
                units: {
                    description: 'the units of RUNEPool owned by providers (including pending)',
                    example: '123456',
                    type: 'string'
                },
                value: {
                    description: 'the value of the provider share of the RUNEPool (includes pending RUNE)',
                    example: '123456',
                    type: 'string'
                }
            },
            required: ['units', 'pending_units', 'pending_rune', 'value', 'pnl', 'rune_deposited', 'rune_withdrawn', 'current_deposit'],
            type: 'object'
        },
        reserve: {
            properties: {
                current_deposit: {
                    description: 'the current RUNE deposited by the reserve',
                    example: '123456',
                    type: 'string'
                },
                pnl: {
                    description: 'the profit and loss of the reserve share of the RUNEPool',
                    example: '123456',
                    type: 'string'
                },
                units: {
                    description: 'the units of RUNEPool owned by the reserve',
                    example: '123456',
                    type: 'string'
                },
                value: {
                    description: 'the value of the reserve share of the RUNEPool',
                    example: '123456',
                    type: 'string'
                }
            },
            required: ['units', 'value', 'pnl', 'rune_deposited', 'rune_withdrawn', 'current_deposit'],
            type: 'object'
        }
    },
    required: ['pol', 'providers', 'reserve'],
    type: 'object'
} as const;

export const RUNEProviderSchema = {
    properties: {
        deposit_amount: {
            example: '6677',
            type: 'string'
        },
        last_deposit_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        last_withdraw_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        pnl: {
            example: '123456',
            type: 'string'
        },
        rune_address: {
            example: 'THOR.RUNE',
            type: 'string'
        },
        units: {
            example: '1234',
            type: 'string'
        },
        value: {
            example: '123456',
            type: 'string'
        },
        withdraw_amount: {
            example: '5443',
            type: 'string'
        }
    },
    required: ['rune_address', 'units', 'value', 'pnl', 'deposit_amount', 'withdraw_amount', 'last_deposit_height', 'last_withdraw_height'],
    type: 'object'
} as const;

export const RUNEProviderResponseSchema = {
    '$ref': '#/components/schemas/RUNEProvider'
} as const;

export const RUNEProvidersResponseSchema = {
    items: {
        '$ref': '#/components/schemas/RUNEProvider'
    },
    type: 'array'
} as const;

export const SaverSchema = {
    properties: {
        asset: {
            example: 'BTC.BTC',
            type: 'string'
        },
        asset_address: {
            example: 'bc1qn9esxuw8ca7ts8l6w66kdh800s09msvutydc46',
            type: 'string'
        },
        asset_deposit_value: {
            example: '0',
            type: 'string'
        },
        asset_redeem_value: {
            example: '0',
            type: 'string'
        },
        growth_pct: {
            example: '0.02',
            type: 'string'
        },
        last_add_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        last_withdraw_height: {
            example: 82745,
            format: 'int64',
            type: 'integer'
        },
        units: {
            example: '0',
            type: 'string'
        }
    },
    required: ['asset', 'asset_address', 'units', 'asset_deposit_value', 'asset_redeem_value', 'growth_pct'],
    type: 'object'
} as const;

export const SaverResponseSchema = {
    '$ref': '#/components/schemas/Saver'
} as const;

export const SaversResponseSchema = {
    items: {
        '$ref': '#/components/schemas/Saver'
    },
    type: 'array'
} as const;

export const ScheduledResponseSchema = {
    items: {
        '$ref': '#/components/schemas/TxOutItem'
    },
    type: 'array'
} as const;

export const StreamingSwapSchema = {
    properties: {
        count: {
            description: 'the amount of swap attempts so far',
            format: 'int64',
            type: 'integer'
        },
        deposit: {
            description: 'the number of input tokens the swapper has deposited',
            example: '100',
            type: 'string'
        },
        destination: {
            description: 'the destination address to receive the swap output',
            example: '0x66fb1cd65b97fa40457b90b7d1ca6b92cb64b32b',
            type: 'string'
        },
        failed_swap_reasons: {
            description: 'the list of reasons that sub-swaps have failed',
            items: {
                type: 'string'
            },
            type: 'array'
        },
        failed_swaps: {
            description: 'the list of swap indexes that failed',
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        in: {
            description: 'the amount of input tokens that have been swapped so far',
            example: '100',
            type: 'string'
        },
        interval: {
            description: 'how often each swap is made, in blocks',
            format: 'int64',
            type: 'integer'
        },
        last_height: {
            description: 'the block height of the latest swap',
            format: 'int64',
            type: 'integer'
        },
        out: {
            description: 'the amount of output tokens that have been swapped so far',
            example: '100',
            type: 'string'
        },
        quantity: {
            description: 'the total number of swaps in a streaming swaps',
            format: 'int64',
            type: 'integer'
        },
        source_asset: {
            description: 'the asset to be swapped from',
            example: 'BTC.BTC',
            type: 'string'
        },
        target_asset: {
            description: 'the asset to be swapped to',
            example: 'ETH.ETH',
            type: 'string'
        },
        trade_target: {
            description: 'the total number of tokens the swapper wants to receive of the output asset',
            example: '100',
            type: 'string'
        },
        tx_id: {
            description: 'the hash of a transaction',
            example: 'CF524818D42B63D25BBA0CCC4909F127CAA645C0F9CD07324F2824CC151A64C7',
            type: 'string'
        }
    },
    required: ['trade_target', 'deposit', 'in', 'out'],
    type: 'object'
} as const;

export const StreamingSwapResponseSchema = {
    '$ref': '#/components/schemas/StreamingSwap'
} as const;

export const StreamingSwapsResponseSchema = {
    items: {
        '$ref': '#/components/schemas/StreamingSwap'
    },
    type: 'array'
} as const;

export const SwapQueueResponseSchema = {
    items: {
        '$ref': '#/components/schemas/MsgSwap'
    },
    type: 'array'
} as const;

export const SwapperCloutResponseSchema = {
    properties: {
        address: {
            description: 'address associated with this clout account',
            example: 'bc1....',
            type: 'string'
        },
        last_reclaim_height: {
            description: 'last block height that clout was reclaimed',
            format: 'int64',
            type: 'integer'
        },
        last_spent_height: {
            description: 'last block height that clout was spent',
            format: 'int64',
            type: 'integer'
        },
        reclaimed: {
            description: 'amount of clout that has been reclaimed in total over time (observed clout spent)',
            type: 'string'
        },
        score: {
            description: 'clout score, which is the amount of rune spent on swap fees',
            type: 'string'
        },
        spent: {
            description: 'amount of clout that has been spent in total over time',
            type: 'string'
        }
    },
    required: ['address'],
    type: 'object'
} as const;

export const ThornameSchema = {
    properties: {
        affiliate_collector_rune: {
            description: 'Amount of RUNE currently accrued by this thorname in affiliate fees waiting to be swapped to preferred asset.',
            example: '100',
            type: 'string'
        },
        aliases: {
            items: {
                '$ref': '#/components/schemas/ThornameAlias'
            },
            type: 'array'
        },
        expire_block_height: {
            example: 1234,
            format: 'int64',
            type: 'integer'
        },
        name: {
            example: 'thor',
            type: 'string'
        },
        owner: {
            example: 'thor1f3s7q037eancht7sg0aj995dht25rwrnu4ats5',
            type: 'string'
        },
        preferred_asset: {
            example: 'BTC.BTC',
            type: 'string'
        }
    },
    required: ['preferred_asset', 'aliases'],
    type: 'object'
} as const;

export const ThornameAliasSchema = {
    properties: {
        address: {
            example: 'bc1qn9esxuw8ca7ts8l6w66kdh800s09msvutydc46',
            type: 'string'
        },
        chain: {
            example: 'BTC',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const ThornameResponseSchema = {
    '$ref': '#/components/schemas/Thorname'
} as const;

export const TradeAccountResponseSchema = {
    properties: {
        asset: {
            description: 'trade account asset with "~" separator',
            example: 'BTC~BTC',
            type: 'string'
        },
        last_add_height: {
            description: 'last thorchain height trade assets were added to trade account',
            format: 'int64',
            type: 'integer'
        },
        last_withdraw_height: {
            description: 'last thorchain height trade assets were withdrawn from trade account',
            format: 'int64',
            type: 'integer'
        },
        owner: {
            description: 'thor address of trade account owner',
            type: 'string'
        },
        units: {
            description: 'units of trade asset belonging to this owner',
            type: 'string'
        }
    },
    required: ['asset', 'units', 'owner'],
    type: 'object'
} as const;

export const TradeAccountsResponseSchema = {
    items: {
        '$ref': '#/components/schemas/TradeAccountResponse'
    },
    type: 'array'
} as const;

export const TradeUnitResponseSchema = {
    properties: {
        asset: {
            description: 'trade account asset with "~" separator',
            example: 'BTC~BTC',
            type: 'string'
        },
        depth: {
            description: 'total depth of trade asset',
            type: 'string'
        },
        units: {
            description: 'total units of trade asset',
            type: 'string'
        }
    },
    required: ['asset', 'units', 'depth'],
    type: 'object'
} as const;

export const TradeUnitsResponseSchema = {
    items: {
        '$ref': '#/components/schemas/TradeUnitResponse'
    },
    type: 'array'
} as const;

export const TssKeysignMetricSchema = {
    properties: {
        node_tss_times: {
            items: {
                '$ref': '#/components/schemas/TssMetric'
            },
            type: 'array'
        },
        tx_id: {
            type: 'string'
        }
    },
    required: ['node_tss_times'],
    type: 'object'
} as const;

export const TssMetricSchema = {
    properties: {
        address: {
            type: 'string'
        },
        tss_time: {
            format: 'int64',
            type: 'integer'
        }
    },
    type: 'object'
} as const;

export const TxSchema = {
    properties: {
        chain: {
            example: 'BTC',
            type: 'string'
        },
        coins: {
            items: {
                '$ref': '#/components/schemas/Coin'
            },
            type: 'array'
        },
        from_address: {
            example: 'bcrt1q0s4mg25tu6termrk8egltfyme4q7sg3h8kkydt',
            type: 'string'
        },
        gas: {
            items: {
                '$ref': '#/components/schemas/Coin'
            },
            type: 'array'
        },
        id: {
            example: 'CF524818D42B63D25BBA0CCC4909F127CAA645C0F9CD07324F2824CC151A64C7',
            type: 'string'
        },
        memo: {
            example: 'ADD:BTC.BTC:thor1zupk5lmc84r2dh738a9g3zscavannjy3nzplwt',
            type: 'string'
        },
        to_address: {
            example: 'bcrt1qf3s7q037eancht7sg0aj995dht25rwrnqsf45e',
            type: 'string'
        }
    },
    required: ['coins', 'gas'],
    type: 'object'
} as const;

export const TxDetailsResponseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/TxOutItem'
            },
            type: 'array'
        },
        consensus_height: {
            description: 'the thorchain height at which the inbound reached consensus',
            example: 7581321,
            format: 'int64',
            type: 'integer'
        },
        finalised_height: {
            description: 'the thorchain height at which the outbound was finalised',
            example: 7581334,
            format: 'int64',
            type: 'integer'
        },
        out_txs: {
            items: {
                '$ref': '#/components/schemas/Tx'
            },
            type: 'array'
        },
        outbound_height: {
            description: 'the thorchain height for which the outbound was scheduled',
            example: 1234,
            format: 'int64',
            type: 'integer'
        },
        reverted: {
            example: false,
            type: 'boolean'
        },
        tx: {
            '$ref': '#/components/schemas/ObservedTx'
        },
        tx_id: {
            example: 'CF524818D42B63D25BBA0CCC4909F127CAA645C0F9CD07324F2824CC151A64C7',
            type: 'string'
        },
        txs: {
            items: {
                '$ref': '#/components/schemas/ObservedTx'
            },
            type: 'array'
        },
        updated_vault: {
            example: false,
            type: 'boolean'
        }
    },
    required: ['tx', 'txs', 'actions', 'out_txs'],
    type: 'object'
} as const;

export const TxOutItemSchema = {
    properties: {
        chain: {
            example: 'ETH',
            type: 'string'
        },
        clout_spent: {
            description: 'clout spent in RUNE for the outbound',
            example: '1234',
            type: 'string'
        },
        coin: {
            '$ref': '#/components/schemas/Coin'
        },
        gas_rate: {
            format: 'int64',
            type: 'integer'
        },
        height: {
            example: 1234,
            format: 'int64',
            type: 'integer'
        },
        in_hash: {
            example: '208BF0ACD78C89A0534B0457BA0867B101961A2319C1E49DD28676526904BBEA',
            type: 'string'
        },
        max_gas: {
            items: {
                '$ref': '#/components/schemas/Coin'
            },
            type: 'array'
        },
        memo: {
            example: 'OUT:208BF0ACD78C89A0534B0457BA0867B101961A2319C1E49DD28676526904BBEA',
            type: 'string'
        },
        out_hash: {
            example: '0D0B2FDB6DAD6E5FD3C5E46D39128F9DA15E96F0B2CC054CE059EA3532B150FB',
            type: 'string'
        },
        to_address: {
            example: '0x66fb1cd65b97fa40457b90b7d1ca6b92cb64b32b',
            type: 'string'
        },
        vault_pub_key: {
            example: 'thorpub1addwnpepqt45wmsxj29xpgdrdsvg2h3dx68qeapgykw3hlyj6vuds2r0pnkwx5gt9m4',
            type: 'string'
        }
    },
    required: ['chain', 'to_address', 'coin', 'max_gas'],
    type: 'object'
} as const;

export const TxResponseSchema = {
    properties: {
        consensus_height: {
            description: 'the thorchain height at which the inbound reached consensus',
            example: 7581321,
            format: 'int64',
            type: 'integer'
        },
        finalised_height: {
            description: 'the thorchain height at which the outbound was finalised',
            example: 7581334,
            format: 'int64',
            type: 'integer'
        },
        keysign_metric: {
            '$ref': '#/components/schemas/TssKeysignMetric'
        },
        observed_tx: {
            '$ref': '#/components/schemas/ObservedTx'
        },
        outbound_height: {
            description: 'the thorchain height for which the outbound was scheduled',
            example: 1234,
            format: 'int64',
            type: 'integer'
        }
    },
    type: 'object'
} as const;

export const TxSignersResponseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/TxOutItem'
            },
            type: 'array'
        },
        consensus_height: {
            description: 'the thorchain height at which the inbound reached consensus',
            example: 7581321,
            format: 'int64',
            type: 'integer'
        },
        finalised_height: {
            description: 'the thorchain height at which the outbound was finalised',
            example: 7581334,
            format: 'int64',
            type: 'integer'
        },
        out_txs: {
            items: {
                '$ref': '#/components/schemas/Tx'
            },
            type: 'array'
        },
        outbound_height: {
            description: 'the thorchain height for which the outbound was scheduled',
            example: 1234,
            format: 'int64',
            type: 'integer'
        },
        reverted: {
            example: false,
            type: 'boolean'
        },
        tx: {
            '$ref': '#/components/schemas/ObservedTx'
        },
        tx_id: {
            example: 'CF524818D42B63D25BBA0CCC4909F127CAA645C0F9CD07324F2824CC151A64C7',
            type: 'string'
        },
        txs: {
            items: {
                '$ref': '#/components/schemas/ObservedTx'
            },
            type: 'array'
        },
        updated_vault: {
            example: false,
            type: 'boolean'
        }
    },
    required: ['tx', 'txs', 'actions', 'out_txs'],
    type: 'object'
} as const;

export const TxStagesResponseSchema = {
    properties: {
        inbound_confirmation_counted: {
            properties: {
                chain: {
                    description: 'the external source chain for which confirmation counting takes place',
                    example: 'BTC',
                    type: 'string'
                },
                completed: {
                    description: 'returns true if no transaction confirmation counting remains to be done',
                    example: false,
                    type: 'boolean'
                },
                counting_start_height: {
                    description: 'the THORChain block height when confirmation counting began',
                    example: 1234,
                    format: 'int64',
                    type: 'integer'
                },
                external_confirmation_delay_height: {
                    description: 'the block height on the external source chain when confirmation counting will be complete',
                    example: 16042626,
                    format: 'int64',
                    type: 'integer'
                },
                external_observed_height: {
                    description: 'the block height on the external source chain when the transaction was observed',
                    example: 16042625,
                    format: 'int64',
                    type: 'integer'
                },
                remaining_confirmation_seconds: {
                    description: 'the estimated remaining seconds before confirmation counting completes',
                    example: 600,
                    format: 'int64',
                    type: 'integer'
                }
            },
            required: ['completed'],
            title: 'InboundConfirmationCountedStage',
            type: 'object'
        },
        inbound_finalised: {
            properties: {
                completed: {
                    description: 'returns true if the inbound transaction has been finalised (THORChain agreeing it exists)',
                    example: false,
                    type: 'boolean'
                }
            },
            required: ['completed'],
            title: 'InboundFinalisedStage',
            type: 'object'
        },
        inbound_observed: {
            properties: {
                completed: {
                    description: 'returns true if no transaction observation remains to be done',
                    example: false,
                    type: 'boolean'
                },
                final_count: {
                    description: 'number of signers for final observations, after any confirmation counting complete',
                    example: 80,
                    format: 'int64',
                    type: 'integer'
                },
                pre_confirmation_count: {
                    description: 'number of signers for pre-confirmation-counting observations',
                    example: 80,
                    format: 'int64',
                    type: 'integer'
                },
                started: {
                    description: 'returns true if any nodes have observed the transaction (to be deprecated in favour of counts)',
                    example: false,
                    type: 'boolean'
                }
            },
            required: ['final_count', 'completed'],
            title: 'InboundObservedStage',
            type: 'object'
        },
        outbound_delay: {
            properties: {
                completed: {
                    description: 'returns true if no transaction outbound delay remains',
                    example: false,
                    type: 'boolean'
                },
                remaining_delay_blocks: {
                    description: 'the number of remaining THORChain blocks the outbound will be delayed',
                    example: 5,
                    format: 'int64',
                    type: 'integer'
                },
                remaining_delay_seconds: {
                    description: 'the estimated remaining seconds of the outbound delay before it will be sent',
                    example: 30,
                    format: 'int64',
                    type: 'integer'
                }
            },
            required: ['completed'],
            title: 'OutboundDelayStage',
            type: 'object'
        },
        outbound_signed: {
            properties: {
                blocks_since_scheduled: {
                    description: 'THORChain blocks since the scheduled outbound height',
                    example: 1234,
                    format: 'int64',
                    type: 'integer'
                },
                completed: {
                    description: 'returns true if an external transaction has been signed and broadcast (and observed in its mempool)',
                    example: false,
                    type: 'boolean'
                },
                scheduled_outbound_height: {
                    description: 'THORChain height for which the external outbound is scheduled',
                    example: 1234,
                    format: 'int64',
                    type: 'integer'
                }
            },
            required: ['completed'],
            title: 'OutboundSignedStage',
            type: 'object'
        },
        swap_finalised: {
            properties: {
                completed: {
                    description: "(to be deprecated in favor of swap_status) returns true if an inbound transaction's swap (successful or refunded) is no longer pending",
                    example: false,
                    type: 'boolean'
                }
            },
            required: ['completed'],
            title: 'SwapFinalisedStage',
            type: 'object'
        },
        swap_status: {
            properties: {
                pending: {
                    description: 'true when awaiting a swap',
                    example: false,
                    type: 'boolean'
                },
                streaming: {
                    properties: {
                        count: {
                            description: 'the amount of swap attempts so far',
                            format: 'int64',
                            type: 'integer'
                        },
                        interval: {
                            description: 'how often each swap is made, in blocks',
                            format: 'int64',
                            type: 'integer'
                        },
                        quantity: {
                            description: 'the total number of swaps in a streaming swaps',
                            format: 'int64',
                            type: 'integer'
                        }
                    },
                    required: ['interval', 'quantity', 'count'],
                    title: 'StreamingStatus',
                    type: 'object'
                }
            },
            required: ['pending'],
            title: 'SwapStatus',
            type: 'object'
        }
    },
    required: ['inbound_observed'],
    type: 'object'
} as const;

export const TxStatusResponseSchema = {
    properties: {
        out_txs: {
            items: {
                '$ref': '#/components/schemas/Tx'
            },
            type: 'array'
        },
        planned_out_txs: {
            items: {
                properties: {
                    chain: {
                        example: 'BTC',
                        type: 'string'
                    },
                    coin: {
                        '$ref': '#/components/schemas/Coin'
                    },
                    refund: {
                        description: 'returns true if the planned transaction has a refund memo',
                        example: false,
                        type: 'boolean'
                    },
                    to_address: {
                        example: 'bcrt1qf3s7q037eancht7sg0aj995dht25rwrnqsf45e',
                        type: 'string'
                    }
                },
                required: ['chain', 'to_address', 'coin', 'refund'],
                title: 'PlannedOutTx',
                type: 'object'
            },
            type: 'array'
        },
        stages: {
            '$ref': '#/components/schemas/TxStagesResponse'
        },
        tx: {
            '$ref': '#/components/schemas/Tx'
        }
    },
    required: ['stages'],
    type: 'object'
} as const;

export const UpgradeProposalSchema = {
    properties: {
        approved: {
            description: 'whether the upgrade has been approved by the active validators',
            example: true,
            type: 'boolean'
        },
        approved_percent: {
            description: 'the percentage of active validators that have approved the upgrade',
            example: '0.8',
            type: 'string'
        },
        height: {
            description: 'the block height at which the upgrade will occur',
            example: 1234,
            format: 'int64',
            type: 'integer'
        },
        info: {
            description: 'the description of the upgrade, typically json with URLs to binaries for use with automation tools',
            example: '{"binaries":{"linux/amd64":"https://link.to.binary.amd64","linux/arm64":"https://link.to.binary.arm64"}}',
            type: 'string'
        },
        name: {
            description: 'the name of the upgrade',
            example: 'scheduled upgrade 1',
            type: 'string'
        },
        validators_to_quorum: {
            description: 'the amount of additional active validators required to reach quorum for the upgrade',
            example: 20,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['name', 'height', 'info'],
    type: 'object'
} as const;

export const UpgradeProposalResponseSchema = {
    '$ref': '#/components/schemas/UpgradeProposal'
} as const;

export const UpgradeProposalsResponseSchema = {
    items: {
        '$ref': '#/components/schemas/UpgradeProposal'
    },
    type: 'array'
} as const;

export const UpgradeVoteSchema = {
    properties: {
        node_address: {
            description: 'the node address of the voter',
            example: 'thor1f3s7q037eancht7sg0aj995dht25rwrnu4ats5',
            type: 'string'
        },
        vote: {
            description: 'the vote cast by the node',
            enum: ['approve', 'reject'],
            example: 'approve',
            type: 'string'
        }
    },
    required: ['height', 'node_address', 'vote'],
    type: 'object'
} as const;

export const UpgradeVotesResponseSchema = {
    items: {
        '$ref': '#/components/schemas/UpgradeVote'
    },
    type: 'array'
} as const;

export const VaultSchema = {
    properties: {
        addresses: {
            items: {
                '$ref': '#/components/schemas/VaultAddress'
            },
            type: 'array'
        },
        block_height: {
            format: 'int64',
            type: 'integer'
        },
        chains: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        coins: {
            items: {
                '$ref': '#/components/schemas/Coin'
            },
            type: 'array'
        },
        frozen: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        inbound_tx_count: {
            format: 'int64',
            type: 'integer'
        },
        membership: {
            description: 'the list of node public keys which are members of the vault',
            items: {
                type: 'string'
            },
            type: 'array'
        },
        outbound_tx_count: {
            format: 'int64',
            type: 'integer'
        },
        pending_tx_block_heights: {
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        pub_key: {
            type: 'string'
        },
        routers: {
            items: {
                '$ref': '#/components/schemas/VaultRouter'
            },
            type: 'array'
        },
        status: {
            type: 'string'
        },
        status_since: {
            format: 'int64',
            type: 'integer'
        },
        type: {
            enum: ['AsgardVault', 'YggdrasilVault'],
            type: 'string'
        }
    },
    required: ['coins', 'status', 'routers', 'addresses'],
    type: 'object'
} as const;

export const VaultAddressSchema = {
    properties: {
        address: {
            example: 'bc1qd45uzetakjvdy5ynjjyp4nlnj89am88e4e5jeq',
            type: 'string'
        },
        chain: {
            example: 'BTC',
            type: 'string'
        }
    },
    required: ['chain', 'address'],
    type: 'object'
} as const;

export const VaultInfoSchema = {
    properties: {
        pub_key: {
            example: 'thorpub1addwnpepq068dr0x7ue973drmq4eqmzhcq3650n7nx5fhgn9gl207luxp6vaklu52tc',
            type: 'string'
        },
        routers: {
            items: {
                '$ref': '#/components/schemas/VaultRouter'
            },
            type: 'array'
        }
    },
    required: ['pub_key', 'routers'],
    type: 'object'
} as const;

export const VaultPubkeysResponseSchema = {
    properties: {
        asgard: {
            items: {
                '$ref': '#/components/schemas/VaultInfo'
            },
            type: 'array'
        },
        inactive: {
            items: {
                '$ref': '#/components/schemas/VaultInfo'
            },
            type: 'array'
        },
        yggdrasil: {
            items: {
                '$ref': '#/components/schemas/VaultInfo'
            },
            type: 'array'
        }
    },
    required: ['asgard', 'yggdrasil', 'inactive'],
    type: 'object'
} as const;

export const VaultResponseSchema = {
    '$ref': '#/components/schemas/Vault'
} as const;

export const VaultRouterSchema = {
    properties: {
        chain: {
            example: 'ETH',
            type: 'string'
        },
        router: {
            example: '0x3624525075b88B24ecc29CE226b0CEc1fFcB6976',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const VaultsResponseSchema = {
    items: {
        '$ref': '#/components/schemas/Vault'
    },
    type: 'array'
} as const;

export const VersionResponseSchema = {
    properties: {
        current: {
            description: 'current version',
            example: '0.17.0',
            type: 'string'
        },
        next: {
            description: 'next version (minimum version for a node to become Active)',
            example: '0.18.0',
            type: 'string'
        },
        next_since_height: {
            description: 'height at which the minimum joining version last changed',
            example: 2000000,
            format: 'int64',
            type: 'integer'
        },
        querier: {
            description: 'querier version',
            example: '0.16.0',
            type: 'string'
        }
    },
    required: ['current', 'next', 'querier'],
    type: 'object'
} as const;

export const YggdrasilVaultSchema = {
    properties: {
        addresses: {
            items: {
                '$ref': '#/components/schemas/VaultAddress'
            },
            type: 'array'
        },
        block_height: {
            format: 'int64',
            type: 'integer'
        },
        bond: {
            description: 'current node bond',
            example: '123456789',
            type: 'string'
        },
        chains: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        coins: {
            items: {
                '$ref': '#/components/schemas/Coin'
            },
            type: 'array'
        },
        inbound_tx_count: {
            format: 'int64',
            type: 'integer'
        },
        membership: {
            description: 'the list of node public keys which are members of the vault',
            items: {
                type: 'string'
            },
            type: 'array'
        },
        outbound_tx_count: {
            format: 'int64',
            type: 'integer'
        },
        pending_tx_block_heights: {
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        pub_key: {
            type: 'string'
        },
        routers: {
            items: {
                '$ref': '#/components/schemas/VaultRouter'
            },
            type: 'array'
        },
        status: {
            type: 'string'
        },
        status_since: {
            format: 'int64',
            type: 'integer'
        },
        total_value: {
            description: "value in rune of the vault's assets",
            example: '83456789',
            type: 'string'
        },
        type: {
            enum: ['AsgardVault', 'YggdrasilVault'],
            type: 'string'
        }
    },
    required: ['coins', 'routers', 'status', 'bond', 'total_value', 'addresses'],
    type: 'object'
} as const;

export const YggdrasilVaultsResponseSchema = {
    items: {
        '$ref': '#/components/schemas/YggdrasilVault'
    },
    type: 'array'
} as const;

export const baseQuoteResponseSchema = {
    properties: {
        dust_threshold: {
            description: 'Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.',
            example: '10000',
            type: 'string'
        },
        expiry: {
            description: 'expiration timestamp in unix seconds',
            example: 1671660285,
            format: 'int64',
            type: 'integer'
        },
        fees: {
            '$ref': '#/components/schemas/QuoteFees'
        },
        gas_rate_units: {
            description: 'the units of the recommended gas rate',
            example: 'gwei',
            type: 'string'
        },
        inbound_address: {
            description: 'the inbound address for the transaction on the source chain',
            example: 'bc1qjk3xzu5slu7mtmc8jc9yed3zqvkhkttm700g9a',
            type: 'string'
        },
        inbound_confirmation_blocks: {
            description: 'the approximate number of source chain blocks required before processing',
            format: 'int64',
            type: 'integer'
        },
        inbound_confirmation_seconds: {
            description: 'the approximate seconds for block confirmations required before processing',
            format: 'int64',
            type: 'integer'
        },
        notes: {
            description: 'chain specific quote notes',
            example: 'Transfer the inbound_address the asset with the memo. Do not use multi-in, multi-out transactions.',
            type: 'string'
        },
        outbound_delay_blocks: {
            description: 'the number of thorchain blocks the outbound will be delayed',
            format: 'int64',
            type: 'integer'
        },
        outbound_delay_seconds: {
            description: 'the approximate seconds for the outbound delay before it will be sent',
            format: 'int64',
            type: 'integer'
        },
        recommended_gas_rate: {
            description: 'the recommended gas rate to use for the inbound to ensure timely confirmation',
            example: '10',
            type: 'string'
        },
        recommended_min_amount_in: {
            description: 'The recommended minimum inbound amount for this transaction type & inbound asset. Sending less than this amount could result in failed refunds.',
            example: '15000',
            type: 'string'
        },
        router: {
            description: 'the EVM chain router contract address',
            example: '0x3624525075b88B24ecc29CE226b0CEc1fFcB6976',
            type: 'string'
        },
        warning: {
            description: 'static warning message',
            example: 'Do not cache this response. Do not send funds after the expiry.',
            type: 'string'
        }
    }
} as const;