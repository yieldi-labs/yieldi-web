// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  PoolsData,
  PoolsError,
  PoolsResponse2,
  RuneProvidersData,
  RuneProvidersError,
  RuneProvidersResponse,
  TxStatusData,
  TxStatusError,
  TxStatusResponse2,
  QueueData,
  QueueError,
  QueueResponse2,
  QueueOutboundData,
  QueueOutboundError,
  QueueOutboundResponse,
  InvariantsData,
  InvariantsError,
  InvariantsResponse2,
  BlockData,
  BlockError,
  BlockResponse2,
  RuneProviderData,
  RuneProviderError,
  RuneProviderResponse,
  TradeUnitData,
  TradeUnitError,
  TradeUnitResponse2,
  MimirNodeData,
  MimirNodeError,
  MimirNodeResponse,
  QuotesaverdepositData,
  QuotesaverdepositError,
  QuotesaverdepositResponse,
  QuoteloancloseData,
  QuoteloancloseError,
  QuoteloancloseResponse,
  SaversData,
  SaversError,
  SaversResponse2,
  AsgardData,
  AsgardError,
  AsgardResponse,
  VaultPubkeysData,
  VaultPubkeysError,
  VaultPubkeysResponse2,
  OutboundFeesData,
  OutboundFeesError,
  OutboundFeesResponse2,
  TradeUnitsData,
  TradeUnitsError,
  TradeUnitsResponse2,
  InvariantData,
  InvariantError,
  InvariantResponse2,
  DpoolData,
  DpoolError,
  DpoolResponse,
  UpgradeProposalData,
  UpgradeProposalError,
  UpgradeProposalResponse2,
  RagnarokData,
  RagnarokError,
  RagnarokResponse,
  MimirKeyData,
  MimirKeyError,
  MimirKeyResponse,
  SaverData,
  SaverError,
  SaverResponse2,
  TxSignersData,
  TxSignersError,
  TxSignersResponse2,
  NetworkData,
  NetworkError,
  NetworkResponse2,
  UpgradeVotesData,
  UpgradeVotesError,
  UpgradeVotesResponse2,
  StreamSwapsData,
  StreamSwapsError,
  StreamSwapsResponse,
  KeysignData,
  KeysignError,
  KeysignResponse2,
  KeygenPubkeyData,
  KeygenPubkeyError,
  KeygenPubkeyResponse,
  QuoteswapData,
  QuoteswapError,
  QuoteswapResponse,
  MimirAdminData,
  MimirAdminError,
  MimirAdminResponse,
  PingError,
  PingResponse,
  RunePoolData,
  RunePoolError,
  RunePoolResponse,
  YggdrasilData,
  YggdrasilError,
  YggdrasilResponse,
  SwapperCloutData,
  SwapperCloutError,
  SwapperCloutResponse2,
  TradeAccountData,
  TradeAccountError,
  TradeAccountResponse2,
  TradeAccountsData,
  TradeAccountsError,
  TradeAccountsResponse2,
  MetricsKeygenData,
  MetricsKeygenError,
  MetricsKeygenResponse,
  MimirNodesData,
  MimirNodesError,
  MimirNodesResponse2,
  QuoteloanopenData,
  QuoteloanopenError,
  QuoteloanopenResponse,
  QueueSwapData,
  QueueSwapError,
  QueueSwapResponse,
  PoolData,
  PoolError,
  PoolResponse2,
  BorrowerData,
  BorrowerError,
  BorrowerResponse2,
  TxSignersOldData,
  TxSignersOldError,
  TxSignersOldResponse,
  NodesData,
  NodesError,
  NodesResponse2,
  InboundAddressesData,
  InboundAddressesError,
  InboundAddressesResponse2,
  LastblockData,
  LastblockError,
  LastblockResponse,
  VersionData,
  VersionError,
  VersionResponse2,
  MimirData,
  MimirError,
  MimirResponse2,
  TxStagesData,
  TxStagesError,
  TxStagesResponse2,
  StreamSwapData,
  StreamSwapError,
  StreamSwapResponse,
  QueueScheduledData,
  QueueScheduledError,
  QueueScheduledResponse,
  PoolslipData,
  PoolslipError,
  PoolslipResponse,
  DpoolsData,
  DpoolsError,
  DpoolsResponse,
  LiquidityProvidersData,
  LiquidityProvidersError,
  LiquidityProvidersResponse2,
  VaultData,
  VaultError,
  VaultResponse2,
  UpgradeProposalsData,
  UpgradeProposalsError,
  UpgradeProposalsResponse2,
  OutboundFeeAssetData,
  OutboundFeeAssetError,
  OutboundFeeAssetResponse,
  MetricsData,
  MetricsError,
  MetricsResponse2,
  QuotesaverwithdrawData,
  QuotesaverwithdrawError,
  QuotesaverwithdrawResponse,
  ThornameData,
  ThornameError,
  ThornameResponse2,
  PoolslipsData,
  PoolslipsError,
  PoolslipsResponse,
  BorrowersData,
  BorrowersError,
  BorrowersResponse2,
  NodeData,
  NodeError,
  NodeResponse2,
  LastblockChainData,
  LastblockChainError,
  LastblockChainResponse,
  ConstantsData,
  ConstantsError,
  ConstantsResponse2,
  BanData,
  BanError,
  BanResponse2,
  KeysignPubkeyData,
  KeysignPubkeyError,
  KeysignPubkeyResponse,
  LiquidityProviderData,
  LiquidityProviderError,
  LiquidityProviderResponse2,
  TxData,
  TxError,
  TxResponse2,
} from "./types.gen";

export const client = createClient(
  createConfig({
    baseUrl: "https://thornode.ninerealms.com/",
  }),
);

/**
 * Returns the pool information for all assets.
 */
export const pools = <ThrowOnError extends boolean = false>(
  options?: Options<PoolsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PoolsResponse2,
    PoolsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/pools",
  });
};

/**
 * Returns all RUNE Providers.
 */
export const runeProviders = <ThrowOnError extends boolean = false>(
  options?: Options<RuneProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RuneProvidersResponse,
    RuneProvidersError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/rune_providers",
  });
};

/**
 * Returns the status of a provided inbound hash.
 */
export const txStatus = <ThrowOnError extends boolean = false>(
  options: Options<TxStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TxStatusResponse2,
    TxStatusError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/tx/status/{hash}",
  });
};

/**
 * Returns queue statistics.
 */
export const queue = <ThrowOnError extends boolean = false>(
  options?: Options<QueueData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    QueueResponse2,
    QueueError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/queue",
  });
};

/**
 * Returns the outbound queue including estimated RUNE values.
 */
export const queueOutbound = <ThrowOnError extends boolean = false>(
  options?: Options<QueueOutboundData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    QueueOutboundResponse,
    QueueOutboundError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/queue/outbound",
  });
};

/**
 * Returns a list of available invariants.
 */
export const invariants = <ThrowOnError extends boolean = false>(
  options?: Options<InvariantsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InvariantsResponse2,
    InvariantsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/invariants",
  });
};

/**
 * Returns verbose details of the block.
 */
export const block = <ThrowOnError extends boolean = false>(
  options?: Options<BlockData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    BlockResponse2,
    BlockError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/block",
  });
};

/**
 * Returns the RUNE Provider information for an address.
 */
export const runeProvider = <ThrowOnError extends boolean = false>(
  options: Options<RuneProviderData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RuneProviderResponse,
    RuneProviderError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/rune_provider/{address}",
  });
};

/**
 * Returns the total units and depth of a trade asset
 */
export const tradeUnit = <ThrowOnError extends boolean = false>(
  options: Options<TradeUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TradeUnitResponse2,
    TradeUnitError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/trade/unit/{asset}",
  });
};

/**
 * Returns current node mimir configuration for the provided node address.
 */
export const mimirNode = <ThrowOnError extends boolean = false>(
  options: Options<MimirNodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MimirNodeResponse,
    MimirNodeError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/mimir/node/{address}",
  });
};

/**
 * Provide a quote estimate for the provided saver deposit.
 */
export const quotesaverdeposit = <ThrowOnError extends boolean = false>(
  options?: Options<QuotesaverdepositData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    QuotesaverdepositResponse,
    QuotesaverdepositError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/quote/saver/deposit",
  });
};

/**
 * Provide a quote estimate for the provided loan close.
 */
export const quoteloanclose = <ThrowOnError extends boolean = false>(
  options?: Options<QuoteloancloseData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    QuoteloancloseResponse,
    QuoteloancloseError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/quote/loan/close",
  });
};

/**
 * Returns all savers for the savers pool.
 */
export const savers = <ThrowOnError extends boolean = false>(
  options: Options<SaversData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SaversResponse2,
    SaversError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/pool/{asset}/savers",
  });
};

/**
 * Returns current asgard vaults.
 */
export const asgard = <ThrowOnError extends boolean = false>(
  options?: Options<AsgardData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AsgardResponse,
    AsgardError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/vaults/asgard",
  });
};

/**
 * Returns all pubkeys for current vaults.
 */
export const vaultPubkeys = <ThrowOnError extends boolean = false>(
  options?: Options<VaultPubkeysData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    VaultPubkeysResponse2,
    VaultPubkeysError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/vaults/pubkeys",
  });
};

/**
 * Returns the last block information for all chains.
 */
export const outboundFees = <ThrowOnError extends boolean = false>(
  options?: Options<OutboundFeesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OutboundFeesResponse2,
    OutboundFeesError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/outbound_fees",
  });
};

/**
 * Returns the total units and depth for each trade asset
 */
export const tradeUnits = <ThrowOnError extends boolean = false>(
  options?: Options<TradeUnitsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TradeUnitsResponse2,
    TradeUnitsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/trade/units",
  });
};

/**
 * Returns result of running the given invariant.
 */
export const invariant = <ThrowOnError extends boolean = false>(
  options: Options<InvariantData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InvariantResponse2,
    InvariantError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/invariant/{invariant}",
  });
};

/**
 * Returns the pool information for the provided derived asset.
 */
export const dpool = <ThrowOnError extends boolean = false>(
  options: Options<DpoolData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    DpoolResponse,
    DpoolError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/dpool/{asset}",
  });
};

/**
 * Returns the upgrade proposal for the provided name.
 */
export const upgradeProposal = <ThrowOnError extends boolean = false>(
  options: Options<UpgradeProposalData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UpgradeProposalResponse2,
    UpgradeProposalError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/upgrade_proposal/{name}",
  });
};

/**
 * Returns a boolean indicating whether the chain is in ragnarok.
 */
export const ragnarok = <ThrowOnError extends boolean = false>(
  options?: Options<RagnarokData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RagnarokResponse,
    RagnarokError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/ragnarok",
  });
};

/**
 * Returns current active mimir configuration for the provided key.
 */
export const mimirKey = <ThrowOnError extends boolean = false>(
  options: Options<MimirKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MimirKeyResponse,
    MimirKeyError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/mimir/key/{key}",
  });
};

/**
 * Returns the saver position given then savers pool and address.
 */
export const saver = <ThrowOnError extends boolean = false>(
  options: Options<SaverData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SaverResponse2,
    SaverError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/pool/{asset}/saver/{address}",
  });
};

/**
 * Returns the signers for a provided inbound or outbound hash.
 */
export const txSigners = <ThrowOnError extends boolean = false>(
  options: Options<TxSignersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TxSignersResponse2,
    TxSignersError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/tx/details/{hash}",
  });
};

/**
 * Returns network overview statistics.
 */
export const network = <ThrowOnError extends boolean = false>(
  options?: Options<NetworkData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NetworkResponse2,
    NetworkError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/network",
  });
};

/**
 * Returns the upgrade votes for the provided name.
 */
export const upgradeVotes = <ThrowOnError extends boolean = false>(
  options: Options<UpgradeVotesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UpgradeVotesResponse2,
    UpgradeVotesError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/upgrade_votes/{name}",
  });
};

/**
 * Returns the state of all streaming swaps
 */
export const streamSwaps = <ThrowOnError extends boolean = false>(
  options?: Options<StreamSwapsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    StreamSwapsResponse,
    StreamSwapsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/swaps/streaming",
  });
};

/**
 * Returns keysign information for the provided height - the height being the first block a tx out item appears in the signed-but-unobserved outbound queue.
 */
export const keysign = <ThrowOnError extends boolean = false>(
  options: Options<KeysignData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    KeysignResponse2,
    KeysignError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/keysign/{height}",
  });
};

/**
 * Returns keygen information for the provided height and pubkey - the pubkey being of one of the members of a keygen block for that height
 */
export const keygenPubkey = <ThrowOnError extends boolean = false>(
  options: Options<KeygenPubkeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    KeygenPubkeyResponse,
    KeygenPubkeyError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/keygen/{height}/{pubkey}",
  });
};

/**
 * Provide a quote estimate for the provided swap.
 */
export const quoteswap = <ThrowOnError extends boolean = false>(
  options?: Options<QuoteswapData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    QuoteswapResponse,
    QuoteswapError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/quote/swap",
  });
};

/**
 * Returns current admin mimir configuration.
 */
export const mimirAdmin = <ThrowOnError extends boolean = false>(
  options?: Options<MimirAdminData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MimirAdminResponse,
    MimirAdminError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/mimir/admin",
  });
};

export const ping = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<PingResponse, PingError, ThrowOnError>(
    {
      ...options,
      url: "/thorchain/ping",
    },
  );
};

/**
 * Returns the pool information for the RUNE pool.
 */
export const runePool = <ThrowOnError extends boolean = false>(
  options?: Options<RunePoolData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RunePoolResponse,
    RunePoolError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/runepool",
  });
};

/**
 * Returns current yggdrasil vaults.
 */
export const yggdrasil = <ThrowOnError extends boolean = false>(
  options?: Options<YggdrasilData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    YggdrasilResponse,
    YggdrasilError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/vaults/yggdrasil",
  });
};

/**
 * Returns the clout score of an address
 */
export const swapperClout = <ThrowOnError extends boolean = false>(
  options: Options<SwapperCloutData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SwapperCloutResponse2,
    SwapperCloutError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/clout/swap/{address}",
  });
};

/**
 * Returns the units and depth of a trade account
 */
export const tradeAccount = <ThrowOnError extends boolean = false>(
  options: Options<TradeAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TradeAccountResponse2,
    TradeAccountError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/trade/account/{address}",
  });
};

/**
 * Returns all trade accounts for an asset
 */
export const tradeAccounts = <ThrowOnError extends boolean = false>(
  options: Options<TradeAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TradeAccountsResponse2,
    TradeAccountsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/trade/accounts/{asset}",
  });
};

/**
 * Returns keygen metrics for the provided vault pubkey.
 */
export const metricsKeygen = <ThrowOnError extends boolean = false>(
  options: Options<MetricsKeygenData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MetricsKeygenResponse,
    MetricsKeygenError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/metric/keygen/{pubkey}",
  });
};

/**
 * Returns current node mimir votes.
 */
export const mimirNodes = <ThrowOnError extends boolean = false>(
  options?: Options<MimirNodesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MimirNodesResponse2,
    MimirNodesError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/mimir/nodes_all",
  });
};

/**
 * Provide a quote estimate for the provided loan open.
 */
export const quoteloanopen = <ThrowOnError extends boolean = false>(
  options?: Options<QuoteloanopenData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    QuoteloanopenResponse,
    QuoteloanopenError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/quote/loan/open",
  });
};

/**
 * Returns the swap queue.
 */
export const queueSwap = <ThrowOnError extends boolean = false>(
  options?: Options<QueueSwapData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    QueueSwapResponse,
    QueueSwapError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/queue/swap",
  });
};

/**
 * Returns the pool information for the provided asset.
 */
export const pool = <ThrowOnError extends boolean = false>(
  options: Options<PoolData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PoolResponse2,
    PoolError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/pool/{asset}",
  });
};

/**
 * Returns the borrower position given the pool and address.
 */
export const borrower = <ThrowOnError extends boolean = false>(
  options: Options<BorrowerData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    BorrowerResponse2,
    BorrowerError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/pool/{asset}/borrower/{address}",
  });
};

/**
 * Deprecated - migrate to /thorchain/tx/details.
 */
export const txSignersOld = <ThrowOnError extends boolean = false>(
  options: Options<TxSignersOldData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TxSignersOldResponse,
    TxSignersOldError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/tx/{hash}/signers",
  });
};

/**
 * Returns node information for all registered validators.
 */
export const nodes = <ThrowOnError extends boolean = false>(
  options?: Options<NodesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NodesResponse2,
    NodesError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/nodes",
  });
};

/**
 * Returns the set of asgard addresses that should be used for inbound transactions.
 */
export const inboundAddresses = <ThrowOnError extends boolean = false>(
  options?: Options<InboundAddressesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InboundAddressesResponse2,
    InboundAddressesError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/inbound_addresses",
  });
};

/**
 * Returns the last block information for all chains.
 */
export const lastblock = <ThrowOnError extends boolean = false>(
  options?: Options<LastblockData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LastblockResponse,
    LastblockError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/lastblock",
  });
};

/**
 * Returns the network's current THORNode version, the network's next THORNode version, and the querier's THORNode version.
 */
export const version = <ThrowOnError extends boolean = false>(
  options?: Options<VersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    VersionResponse2,
    VersionError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/version",
  });
};

/**
 * Returns current active mimir configuration.
 */
export const mimir = <ThrowOnError extends boolean = false>(
  options?: Options<MimirData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MimirResponse2,
    MimirError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/mimir",
  });
};

/**
 * Returns the processing stages of a provided inbound hash.
 */
export const txStages = <ThrowOnError extends boolean = false>(
  options: Options<TxStagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TxStagesResponse2,
    TxStagesError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/tx/stages/{hash}",
  });
};

/**
 * Returns the state of a streaming swap
 */
export const streamSwap = <ThrowOnError extends boolean = false>(
  options: Options<StreamSwapData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    StreamSwapResponse,
    StreamSwapError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/swap/streaming/{hash}",
  });
};

/**
 * Returns the scheduled queue.
 */
export const queueScheduled = <ThrowOnError extends boolean = false>(
  options?: Options<QueueScheduledData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    QueueScheduledResponse,
    QueueScheduledError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/queue/scheduled",
  });
};

/**
 * Returns the pool slip information for the provided asset.
 */
export const poolslip = <ThrowOnError extends boolean = false>(
  options: Options<PoolslipData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PoolslipResponse,
    PoolslipError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/slip/{asset}",
  });
};

/**
 * Returns the pool information for all derived assets.
 */
export const dpools = <ThrowOnError extends boolean = false>(
  options?: Options<DpoolsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    DpoolsResponse,
    DpoolsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/dpools",
  });
};

/**
 * Returns all liquidity provider information for an asset.
 */
export const liquidityProviders = <ThrowOnError extends boolean = false>(
  options: Options<LiquidityProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LiquidityProvidersResponse2,
    LiquidityProvidersError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/pool/{asset}/liquidity_providers",
  });
};

/**
 * Returns the vault for the provided pubkey.
 */
export const vault = <ThrowOnError extends boolean = false>(
  options: Options<VaultData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    VaultResponse2,
    VaultError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/vault/{pubkey}",
  });
};

/**
 * Returns the current upgrade proposals.
 */
export const upgradeProposals = <ThrowOnError extends boolean = false>(
  options?: Options<UpgradeProposalsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UpgradeProposalsResponse2,
    UpgradeProposalsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/upgrade_proposals",
  });
};

/**
 * Returns the outbound fee information for the provided asset.
 */
export const outboundFeeAsset = <ThrowOnError extends boolean = false>(
  options: Options<OutboundFeeAssetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OutboundFeeAssetResponse,
    OutboundFeeAssetError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/outbound_fee/{asset}",
  });
};

/**
 * Returns keygen and keysign metrics for current vaults.
 */
export const metrics = <ThrowOnError extends boolean = false>(
  options?: Options<MetricsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MetricsResponse2,
    MetricsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/metrics",
  });
};

/**
 * Provide a quote estimate for the provided saver withdraw.
 */
export const quotesaverwithdraw = <ThrowOnError extends boolean = false>(
  options?: Options<QuotesaverwithdrawData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    QuotesaverwithdrawResponse,
    QuotesaverwithdrawError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/quote/saver/withdraw",
  });
};

/**
 * Returns addresses registered to the provided thorname.
 */
export const thorname = <ThrowOnError extends boolean = false>(
  options: Options<ThornameData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ThornameResponse2,
    ThornameError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/thorname/{name}",
  });
};

/**
 * Returns the pool slip information for all Available Layer 1 pool assets.
 */
export const poolslips = <ThrowOnError extends boolean = false>(
  options?: Options<PoolslipsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PoolslipsResponse,
    PoolslipsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/slips",
  });
};

/**
 * Returns all borrowers for the given pool.
 */
export const borrowers = <ThrowOnError extends boolean = false>(
  options: Options<BorrowersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    BorrowersResponse2,
    BorrowersError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/pool/{asset}/borrowers",
  });
};

/**
 * Returns node information for the provided node address.
 */
export const node = <ThrowOnError extends boolean = false>(
  options: Options<NodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NodeResponse2,
    NodeError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/node/{address}",
  });
};

/**
 * Returns the last block information for the provided chain.
 */
export const lastblockChain = <ThrowOnError extends boolean = false>(
  options: Options<LastblockChainData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LastblockChainResponse,
    LastblockChainError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/lastblock/{chain}",
  });
};

/**
 * Returns constant configuration, can be overridden by mimir.
 */
export const constants = <ThrowOnError extends boolean = false>(
  options?: Options<ConstantsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ConstantsResponse2,
    ConstantsError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/constants",
  });
};

/**
 * Returns the ban status for the provided node address.
 */
export const ban = <ThrowOnError extends boolean = false>(
  options: Options<BanData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<BanResponse2, BanError, ThrowOnError>({
    ...options,
    url: "/thorchain/ban/{address}",
  });
};

/**
 * Returns keysign information for the provided height and pubkey - the height being the block at which a tx out item is scheduled to be signed and moved from the scheduled outbound queue to the outbound queue.
 */
export const keysignPubkey = <ThrowOnError extends boolean = false>(
  options: Options<KeysignPubkeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    KeysignPubkeyResponse,
    KeysignPubkeyError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/keysign/{height}/{pubkey}",
  });
};

/**
 * Returns the liquidity provider information for an address and asset.
 */
export const liquidityProvider = <ThrowOnError extends boolean = false>(
  options: Options<LiquidityProviderData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LiquidityProviderResponse2,
    LiquidityProviderError,
    ThrowOnError
  >({
    ...options,
    url: "/thorchain/pool/{asset}/liquidity_provider/{address}",
  });
};

/**
 * Returns the observed transaction for a provided inbound or outbound hash.
 */
export const tx = <ThrowOnError extends boolean = false>(
  options: Options<TxData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<TxResponse2, TxError, ThrowOnError>({
    ...options,
    url: "/thorchain/tx/{hash}",
  });
};
