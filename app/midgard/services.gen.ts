// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  GetActionsData,
  GetActionsError,
  GetActionsResponse,
  GetBalanceData,
  GetBalanceError,
  GetBalanceResponse,
  GetBorrowerDetailData,
  GetBorrowerDetailError,
  GetBorrowerDetailResponse,
  GetBorrowersAddressesData,
  GetBorrowersAddressesError,
  GetBorrowersAddressesResponse,
  GetChurnsError,
  GetChurnsResponse,
  GetDocsError,
  GetDocsResponse,
  GetHealthError,
  GetHealthResponse,
  GetDepthHistoryData,
  GetDepthHistoryError,
  GetDepthHistoryResponse,
  GetEarningsHistoryData,
  GetEarningsHistoryError,
  GetEarningsHistoryResponse,
  GetLiquidityHistoryData,
  GetLiquidityHistoryError,
  GetLiquidityHistoryResponse,
  GetRunePoolHistoryData,
  GetRunePoolHistoryError,
  GetRunePoolHistoryResponse,
  GetSaversHistoryData,
  GetSaversHistoryError,
  GetSaversHistoryResponse,
  GetSwapHistoryData,
  GetSwapHistoryError,
  GetSwapHistoryResponse,
  GetTvlHistoryData,
  GetTvlHistoryError,
  GetTvlHistoryResponse,
  GetKnownPoolsError,
  GetKnownPoolsResponse,
  GetMemberDetailData,
  GetMemberDetailError,
  GetMemberDetailResponse,
  GetMembersAdressesData,
  GetMembersAdressesError,
  GetMembersAdressesResponse,
  GetNetworkDataError,
  GetNetworkDataResponse,
  GetNodesError,
  GetNodesResponse,
  GetPoolData,
  GetPoolError,
  GetPoolResponse,
  GetPoolStatsData,
  GetPoolStatsError,
  GetPoolStatsResponse,
  GetPoolsData,
  GetPoolsError,
  GetPoolsResponse,
  GetReserveHistoryData,
  GetReserveHistoryError,
  GetReserveHistoryResponse,
  GetRunePoolDetailData,
  GetRunePoolDetailError,
  GetRunePoolDetailResponse,
  GetSaverDetailData,
  GetSaverDetailError,
  GetSaverDetailResponse,
  GetStatsError,
  GetStatsResponse,
  GetSwaggerError,
  GetSwaggerResponse,
  GetThorNameDetailData,
  GetThorNameDetailError,
  GetThorNameDetailResponse,
  GetThorNamesOwnerByAddressData,
  GetThorNamesOwnerByAddressError,
  GetThorNamesOwnerByAddressResponse,
  GetThorNamesByAddressData,
  GetThorNamesByAddressError,
  GetThorNamesByAddressResponse,
} from "./types.gen";

export const client = createClient(
  createConfig({
    baseUrl: "https://midgard.ninerealms.com/", // REPLACE WITH VALID `baseUrl`
  }),
);

/**
 * Actions List
 * List actions along with their related transactions. An action is generated by one or more
 * inbound transactions with the intended action set in the transaction memo. The action may
 * result in one or more outbound transactions. Results are paginated by sets of 50.
 * Filters may be applied to query actions.
 *
 */
export const getActions = <ThrowOnError extends boolean = false>(
  options?: Options<GetActionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetActionsResponse,
    GetActionsError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/actions",
  });
};

/**
 * Current balance for an address
 * Returns all coin amounts of the given address at the specified timestamp or
 * height, or at the latest process block if neither is provided. (Only one of
 * timestamp or height can be specified, not both.)
 *
 * This endpoint is enabled only if the midgard startup config allows it.
 *
 */
export const getBalance = <ThrowOnError extends boolean = false>(
  options: Options<GetBalanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBalanceResponse,
    GetBalanceError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/balance/{address}",
  });
};

/**
 * Borrower Details
 * Returns an array of statistics for all the open loans associated with a given
 * borrower address.
 *
 */
export const getBorrowerDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetBorrowerDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBorrowerDetailResponse,
    GetBorrowerDetailError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/borrower/{address}",
  });
};

/**
 * Borrowers List
 * Returns an array containing the addresses for all borrowers.
 * Addresses are only shown once.
 *
 */
export const getBorrowersAddresses = <ThrowOnError extends boolean = false>(
  options?: Options<GetBorrowersAddressesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBorrowersAddressesResponse,
    GetBorrowersAddressesError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/borrowers",
  });
};

/**
 * Churns List
 * Returns block height and timestamp for each churn.
 */
export const getChurns = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetChurnsResponse,
    GetChurnsError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/churns",
  });
};

/**
 * Documentation
 * Swagger/OpenAPI 3.0 specification generated documents.
 */
export const getDocs = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDocsResponse,
    GetDocsError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/doc",
  });
};

/**
 * Health Info
 * Returns an object containing the health response of the API.
 * Meaning of heights:
 *
 * lastThorNode - Latest block as reported by ThorNode.
 *
 * lastFetched - Latest block fetched from ThorNode.
 *
 * lastCommitted - Latest block committed to the DB but not fully processed yet.
 *
 * lastAggregated - Latest block fully processed and aggregated.
 *
 * genesisInfo - The genesis height Midgard bootstrapped with.
 *
 */
export const getHealth = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetHealthResponse,
    GetHealthError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/health",
  });
};

/**
 * Depth and Price History
 * Returns the asset and rune depths and price.
 * The values report the state at the end of each interval.
 *
 * History endpoint has two modes:
 * * With Interval parameter it returns a series of time buckets. From and To dates will
 * be rounded to the Interval boundaries.
 * * Without Interval parameter a single From..To search is performed with exact timestamps.
 *
 *
 * * Interval: possible values: 5min, hour, day, week, month, quarter, year.
 * * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
 * * from/to: optional int, unix second.
 *
 * Possible usages with interval.
 * * last 10 days: `?interval=day&count=10`
 * * last 10 days before to: `?interval=day&count=10&to=1608825600`
 * * next 10 days after from: `?interval=day&count=10&from=1606780800`
 * * Days between from and to. From defaults to start of chain, to defaults to now.
 * Only the first 400 intervals are returned:
 * `interval=day&from=1606780800&to=1608825600`
 *
 * Pagination is possible with from&count and then using the returned meta.endTime as the
 * From parameter of the next query.
 *
 * Possible configurations without interval:
 * * exact search for one time frame: `?from=1606780899&to=1608825600`
 * * one time frame until now: `?from=1606780899`
 * * from chain start until now: no query parameters
 *
 */
export const getDepthHistory = <ThrowOnError extends boolean = false>(
  options: Options<GetDepthHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDepthHistoryResponse,
    GetDepthHistoryError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/history/depths/{pool}",
  });
};

/**
 * Earnings History
 * Returns earnings data for the specified interval.
 *
 * History endpoint has two modes:
 * * With Interval parameter it returns a series of time buckets. From and To dates will
 * be rounded to the Interval boundaries.
 * * Without Interval parameter a single From..To search is performed with exact timestamps.
 *
 *
 * * Interval: possible values: 5min, hour, day, week, month, quarter, year.
 * * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
 * * from/to: optional int, unix second.
 *
 * Possible usages with interval.
 * * last 10 days: `?interval=day&count=10`
 * * last 10 days before to: `?interval=day&count=10&to=1608825600`
 * * next 10 days after from: `?interval=day&count=10&from=1606780800`
 * * Days between from and to. From defaults to start of chain, to defaults to now.
 * Only the first 400 intervals are returned:
 * `interval=day&from=1606780800&to=1608825600`
 *
 * Pagination is possible with from&count and then using the returned meta.endTime as the
 * From parameter of the next query.
 *
 * Possible configurations without interval:
 * * exact search for one time frame: `?from=1606780899&to=1608825600`
 * * one time frame until now: `?from=1606780899`
 * * from chain start until now: no query parameters
 *
 */
export const getEarningsHistory = <ThrowOnError extends boolean = false>(
  options?: Options<GetEarningsHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetEarningsHistoryResponse,
    GetEarningsHistoryError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/history/earnings",
  });
};

/**
 * Liquidity Changes History
 * Returns withdrawals and deposits for given time interval.
 * If pool is not specified returns for all pools
 *
 * History endpoint has two modes:
 * * With Interval parameter it returns a series of time buckets. From and To dates will
 * be rounded to the Interval boundaries.
 * * Without Interval parameter a single From..To search is performed with exact timestamps.
 *
 *
 * * Interval: possible values: 5min, hour, day, week, month, quarter, year.
 * * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
 * * from/to: optional int, unix second.
 *
 * Possible usages with interval.
 * * last 10 days: `?interval=day&count=10`
 * * last 10 days before to: `?interval=day&count=10&to=1608825600`
 * * next 10 days after from: `?interval=day&count=10&from=1606780800`
 * * Days between from and to. From defaults to start of chain, to defaults to now.
 * Only the first 400 intervals are returned:
 * `interval=day&from=1606780800&to=1608825600`
 *
 * Pagination is possible with from&count and then using the returned meta.endTime as the
 * From parameter of the next query.
 *
 * Possible configurations without interval:
 * * exact search for one time frame: `?from=1606780899&to=1608825600`
 * * one time frame until now: `?from=1606780899`
 * * from chain start until now: no query parameters
 *
 */
export const getLiquidityHistory = <ThrowOnError extends boolean = false>(
  options?: Options<GetLiquidityHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLiquidityHistoryResponse,
    GetLiquidityHistoryError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/history/liquidity_changes",
  });
};

/**
 * RUNEPool total members and units History
 * Returns RUNEPool members and units.
 * The values report the state at the end of each interval.
 *
 * History endpoint has two modes:
 * * With Interval parameter it returns a series of time buckets. From and To dates will
 * be rounded to the Interval boundaries.
 * * Without Interval parameter a single From..To search is performed with exact timestamps.
 *
 *
 * * Interval: possible values: 5min, hour, day, week, month, quarter, year.
 * * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
 * * from/to: optional int, unix second.
 *
 * Possible usages with interval.
 * * last 10 days: `?interval=day&count=10`
 * * last 10 days before to: `?interval=day&count=10&to=1608825600`
 * * next 10 days after from: `?interval=day&count=10&from=1606780800`
 * * Days between from and to. From defaults to start of chain, to defaults to now.
 * Only the first 400 intervals are returned:
 * `interval=day&from=1606780800&to=1608825600`
 *
 * Pagination is possible with from&count and then using the returned meta.endTime as the
 * From parameter of the next query.
 *
 * Possible configurations without interval:
 * * exact search for one time frame: `?from=1606780899&to=1608825600`
 * * one time frame until now: `?from=1606780899`
 * * from chain start until now: no query parameters
 *
 */
export const getRunePoolHistory = <ThrowOnError extends boolean = false>(
  options?: Options<GetRunePoolHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRunePoolHistoryResponse,
    GetRunePoolHistoryError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/history/runepool",
  });
};

/**
 * Savers Units and Depth History
 * Returns savers depths and units.
 * The values report the state at the end of each interval.
 *
 * History endpoint has two modes:
 * * With Interval parameter it returns a series of time buckets. From and To dates will
 * be rounded to the Interval boundaries.
 * * Without Interval parameter a single From..To search is performed with exact timestamps.
 *
 *
 * * Interval: possible values: 5min, hour, day, week, month, quarter, year.
 * * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
 * * from/to: optional int, unix second.
 *
 * Possible usages with interval.
 * * last 10 days: `?interval=day&count=10`
 * * last 10 days before to: `?interval=day&count=10&to=1608825600`
 * * next 10 days after from: `?interval=day&count=10&from=1606780800`
 * * Days between from and to. From defaults to start of chain, to defaults to now.
 * Only the first 400 intervals are returned:
 * `interval=day&from=1606780800&to=1608825600`
 *
 * Pagination is possible with from&count and then using the returned meta.endTime as the
 * From parameter of the next query.
 *
 * Possible configurations without interval:
 * * exact search for one time frame: `?from=1606780899&to=1608825600`
 * * one time frame until now: `?from=1606780899`
 * * from chain start until now: no query parameters
 *
 */
export const getSaversHistory = <ThrowOnError extends boolean = false>(
  options: Options<GetSaversHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSaversHistoryResponse,
    GetSaversHistoryError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/history/savers/{pool}",
  });
};

/**
 * Swaps History
 * Returns swap count, volume, fees, slip in specified interval.
 * If pool is not specified returns for all pools
 *
 * History endpoint has two modes:
 * * With Interval parameter it returns a series of time buckets. From and To dates will
 * be rounded to the Interval boundaries.
 * * Without Interval parameter a single From..To search is performed with exact timestamps.
 *
 *
 * * Interval: possible values: 5min, hour, day, week, month, quarter, year.
 * * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
 * * from/to: optional int, unix second.
 *
 * Possible usages with interval.
 * * last 10 days: `?interval=day&count=10`
 * * last 10 days before to: `?interval=day&count=10&to=1608825600`
 * * next 10 days after from: `?interval=day&count=10&from=1606780800`
 * * Days between from and to. From defaults to start of chain, to defaults to now.
 * Only the first 400 intervals are returned:
 * `interval=day&from=1606780800&to=1608825600`
 *
 * Pagination is possible with from&count and then using the returned meta.endTime as the
 * From parameter of the next query.
 *
 * Possible configurations without interval:
 * * exact search for one time frame: `?from=1606780899&to=1608825600`
 * * one time frame until now: `?from=1606780899`
 * * from chain start until now: no query parameters
 *
 */
export const getSwapHistory = <ThrowOnError extends boolean = false>(
  options?: Options<GetSwapHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSwapHistoryResponse,
    GetSwapHistoryError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/history/swaps",
  });
};

/**
 * Total Value Locked History
 * Returns total pool depths, total bonds, and total value locked in specified interval.
 *
 * Total Value Locked = Total Bonds + 2 * Total Pool Depths
 *
 * History endpoint has two modes:
 * * With Interval parameter it returns a series of time buckets. From and To dates will
 * be rounded to the Interval boundaries.
 * * Without Interval parameter a single From..To search is performed with exact timestamps.
 *
 * * Interval: possible values: 5min, hour, day, week, month, quarter, year.
 * * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
 * * from/to: optional int, unix second.
 *
 * Possible usages with interval.
 * * last 10 days: `?interval=day&count=10`
 * * last 10 days before to: `?interval=day&count=10&to=1608825600`
 * * next 10 days after from: `?interval=day&count=10&from=1606780800`
 * * Days between from and to. From defaults to start of chain, to defaults to now.
 * Only the first 400 intervals are returned:
 * `interval=day&from=1606780800&to=1608825600`
 *
 * Pagination is possible with from&count and then using the returned meta.endTime as the
 * From parameter of the next query.
 *
 * Possible configurations without interval:
 * * exact search for one time frame: `?from=1606780899&to=1608825600`
 * * one time frame until now: `?from=1606780899`
 * * from chain start until now: no query parameters
 *
 */
export const getTvlHistory = <ThrowOnError extends boolean = false>(
  options?: Options<GetTvlHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetTvlHistoryResponse,
    GetTvlHistoryError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/history/tvl",
  });
};

/**
 * Known Pools List
 * Returns an object with known pools and their statuses
 */
export const getKnownPools = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetKnownPoolsResponse,
    GetKnownPoolsError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/knownpools",
  });
};

/**
 * Member Details
 * Returns an array of statistics for all the liquidity providers associated with a given
 * member address.
 *
 */
export const getMemberDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetMemberDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMemberDetailResponse,
    GetMemberDetailError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/member/{address}",
  });
};

/**
 * Members List
 * Returns an array containing the addresses for all pool members.
 * Addresses are only shown once. If there's both a RUNE address and an asset address
 * for a member, only the RUNE address will be shown.
 *
 */
export const getMembersAdresses = <ThrowOnError extends boolean = false>(
  options?: Options<GetMembersAdressesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMembersAdressesResponse,
    GetMembersAdressesError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/members",
  });
};

/**
 * Network Data
 * Returns an object containing Network data
 */
export const getNetworkData = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetNetworkDataResponse,
    GetNetworkDataError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/network",
  });
};

/**
 * Nodes List
 * Returns a list of Node public keys and adresses.
 */
export const getNodes = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetNodesResponse,
    GetNodesError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/nodes",
  });
};

/**
 * Details of a Pool
 * Returns details of the pool: depths, price, 24h volume, APY.
 */
export const getPool = <ThrowOnError extends boolean = false>(
  options: Options<GetPoolData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPoolResponse,
    GetPoolError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/pool/{asset}",
  });
};

/**
 * Pool Statistics
 * Statistics about the pool. The description of the fields have pointers about the
 * corresponding v2/history location. Visit the history endpoint for drilldowns.
 *
 */
export const getPoolStats = <ThrowOnError extends boolean = false>(
  options: Options<GetPoolStatsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPoolStatsResponse,
    GetPoolStatsError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/pool/{asset}/stats",
  });
};

/**
 * Pools List
 * Returns an array containing details for a set of pools
 */
export const getPools = <ThrowOnError extends boolean = false>(
  options?: Options<GetPoolsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPoolsResponse,
    GetPoolsError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/pools",
  });
};

/**
 * Reserve income and expenses over bucketed history
 * Returns reserve module network fee, outbound fee, and gas reimbursement flow in
 * bucketed history
 *
 */
export const getReserveHistory = <ThrowOnError extends boolean = false>(
  options?: Options<GetReserveHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetReserveHistoryResponse,
    GetReserveHistoryError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/reserve",
  });
};

/**
 * RUNEPool Details
 * Returns an array of statistics for all the RUNEPool associated with given
 * member addresses.
 * Query can also be multiple addresses should be separated by comma (',')
 *
 */
export const getRunePoolDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetRunePoolDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRunePoolDetailResponse,
    GetRunePoolDetailError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/runepool/{address}",
  });
};

/**
 * Saver Details
 * Returns an array of statistics for all the savers associated with a given
 * member address.
 * Query can also be multiple addresses should be separated by comma (',')
 *
 */
export const getSaverDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetSaverDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSaverDetailResponse,
    GetSaverDetailError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/saver/{address}",
  });
};

/**
 * Global Stats
 * Returns an object containing global stats for all pools and all transactions
 */
export const getStats = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetStatsResponse,
    GetStatsError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/stats",
  });
};

/**
 * Swagger File
 * Returns human and machine readable swagger/openapi specification
 */
export const getSwagger = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSwaggerResponse,
    GetSwaggerError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/swagger.json",
  });
};

/**
 * THORName Details
 * Returns an array of chains and their addresses associated with the given THORName
 */
export const getThorNameDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetThorNameDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetThorNameDetailResponse,
    GetThorNameDetailError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/thorname/lookup/{name}",
  });
};

/**
 * THORName owner
 * Returns an array of THORNames owned by the address. The address is not necessarily an
 * associated address for those thornames.
 *
 */
export const getThorNamesOwnerByAddress = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetThorNamesOwnerByAddressData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetThorNamesOwnerByAddressResponse,
    GetThorNamesOwnerByAddressError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/thorname/owner/{address}",
  });
};

/**
 * Gives a list of THORNames by reverse lookup
 * Returns an array of THORNames associated with the given address
 */
export const getThorNamesByAddress = <ThrowOnError extends boolean = false>(
  options: Options<GetThorNamesByAddressData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetThorNamesByAddressResponse,
    GetThorNamesByAddressError,
    ThrowOnError
  >({
    ...options,
    url: "/v2/thorname/rlookup/{address}",
  });
};
